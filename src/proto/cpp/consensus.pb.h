// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consensus.proto

#ifndef PROTOBUF_consensus_2eproto__INCLUDED
#define PROTOBUF_consensus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_consensus_2eproto();
void protobuf_AssignDesc_consensus_2eproto();
void protobuf_ShutdownFile_consensus_2eproto();

class FeeConfig;
class Pbft;
class PbftCommit;
class PbftEnv;
class PbftNewView;
class PbftPrePrepare;
class PbftPrepare;
class PbftPreparedSet;
class PbftProof;
class PbftViewChange;
class PbftViewChangeWithRawValue;
class Validator;
class ValidatorSet;

enum FeeConfig_Type {
  FeeConfig_Type_UNKNOWN = 0,
  FeeConfig_Type_GAS_PRICE = 1,
  FeeConfig_Type_BASE_RESERVE = 2,
  FeeConfig_Type_FeeConfig_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FeeConfig_Type_FeeConfig_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FeeConfig_Type_IsValid(int value);
const FeeConfig_Type FeeConfig_Type_Type_MIN = FeeConfig_Type_UNKNOWN;
const FeeConfig_Type FeeConfig_Type_Type_MAX = FeeConfig_Type_BASE_RESERVE;
const int FeeConfig_Type_Type_ARRAYSIZE = FeeConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* FeeConfig_Type_descriptor();
inline const ::std::string& FeeConfig_Type_Name(FeeConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    FeeConfig_Type_descriptor(), value);
}
inline bool FeeConfig_Type_Parse(
    const ::std::string& name, FeeConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FeeConfig_Type>(
    FeeConfig_Type_descriptor(), name, value);
}
enum PbftMessageType {
  PBFT_TYPE_PREPREPARE = 0,
  PBFT_TYPE_PREPARE = 1,
  PBFT_TYPE_COMMIT = 2,
  PBFT_TYPE_VIEWCHANGE = 3,
  PBFT_TYPE_NEWVIEW = 4,
  PBFT_TYPE_VIEWCHANG_WITH_RAWVALUE = 5,
  PbftMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PbftMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PbftMessageType_IsValid(int value);
const PbftMessageType PbftMessageType_MIN = PBFT_TYPE_PREPREPARE;
const PbftMessageType PbftMessageType_MAX = PBFT_TYPE_VIEWCHANG_WITH_RAWVALUE;
const int PbftMessageType_ARRAYSIZE = PbftMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PbftMessageType_descriptor();
inline const ::std::string& PbftMessageType_Name(PbftMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PbftMessageType_descriptor(), value);
}
inline bool PbftMessageType_Parse(
    const ::std::string& name, PbftMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PbftMessageType>(
    PbftMessageType_descriptor(), name, value);
}
enum PbftValueType {
  PBFT_VALUE_TX = 0,
  PBFT_VALUE_TXSET = 1,
  PbftValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PbftValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PbftValueType_IsValid(int value);
const PbftValueType PbftValueType_MIN = PBFT_VALUE_TX;
const PbftValueType PbftValueType_MAX = PBFT_VALUE_TXSET;
const int PbftValueType_ARRAYSIZE = PbftValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PbftValueType_descriptor();
inline const ::std::string& PbftValueType_Name(PbftValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PbftValueType_descriptor(), value);
}
inline bool PbftValueType_Parse(
    const ::std::string& name, PbftValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PbftValueType>(
    PbftValueType_descriptor(), name, value);
}
// ===================================================================

class PbftPrePrepare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.PbftPrePrepare) */ {
 public:
  PbftPrePrepare();
  virtual ~PbftPrePrepare();

  PbftPrePrepare(const PbftPrePrepare& from);

  inline PbftPrePrepare& operator=(const PbftPrePrepare& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbftPrePrepare& default_instance();

  void Swap(PbftPrePrepare* other);

  // implements Message ----------------------------------------------

  inline PbftPrePrepare* New() const { return New(NULL); }

  PbftPrePrepare* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbftPrePrepare& from);
  void MergeFrom(const PbftPrePrepare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PbftPrePrepare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 view_number = 1;
  void clear_view_number();
  static const int kViewNumberFieldNumber = 1;
  ::google::protobuf::int64 view_number() const;
  void set_view_number(::google::protobuf::int64 value);

  // optional int64 sequence = 2;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::int64 sequence() const;
  void set_sequence(::google::protobuf::int64 value);

  // optional int64 replica_id = 3;
  void clear_replica_id();
  static const int kReplicaIdFieldNumber = 3;
  ::google::protobuf::int64 replica_id() const;
  void set_replica_id(::google::protobuf::int64 value);

  // optional bytes value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional bytes value_digest = 5;
  void clear_value_digest();
  static const int kValueDigestFieldNumber = 5;
  const ::std::string& value_digest() const;
  void set_value_digest(const ::std::string& value);
  void set_value_digest(const char* value);
  void set_value_digest(const void* value, size_t size);
  ::std::string* mutable_value_digest();
  ::std::string* release_value_digest();
  void set_allocated_value_digest(::std::string* value_digest);

  // @@protoc_insertion_point(class_scope:protocol.PbftPrePrepare)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 view_number_;
  ::google::protobuf::int64 sequence_;
  ::google::protobuf::int64 replica_id_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr value_digest_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consensus_2eproto();
  friend void protobuf_AssignDesc_consensus_2eproto();
  friend void protobuf_ShutdownFile_consensus_2eproto();

  void InitAsDefaultInstance();
  static PbftPrePrepare* default_instance_;
};
// -------------------------------------------------------------------

class PbftPrepare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.PbftPrepare) */ {
 public:
  PbftPrepare();
  virtual ~PbftPrepare();

  PbftPrepare(const PbftPrepare& from);

  inline PbftPrepare& operator=(const PbftPrepare& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbftPrepare& default_instance();

  void Swap(PbftPrepare* other);

  // implements Message ----------------------------------------------

  inline PbftPrepare* New() const { return New(NULL); }

  PbftPrepare* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbftPrepare& from);
  void MergeFrom(const PbftPrepare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PbftPrepare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 view_number = 1;
  void clear_view_number();
  static const int kViewNumberFieldNumber = 1;
  ::google::protobuf::int64 view_number() const;
  void set_view_number(::google::protobuf::int64 value);

  // optional int64 sequence = 2;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::int64 sequence() const;
  void set_sequence(::google::protobuf::int64 value);

  // optional int64 replica_id = 3;
  void clear_replica_id();
  static const int kReplicaIdFieldNumber = 3;
  ::google::protobuf::int64 replica_id() const;
  void set_replica_id(::google::protobuf::int64 value);

  // optional bytes value_digest = 4;
  void clear_value_digest();
  static const int kValueDigestFieldNumber = 4;
  const ::std::string& value_digest() const;
  void set_value_digest(const ::std::string& value);
  void set_value_digest(const char* value);
  void set_value_digest(const void* value, size_t size);
  ::std::string* mutable_value_digest();
  ::std::string* release_value_digest();
  void set_allocated_value_digest(::std::string* value_digest);

  // @@protoc_insertion_point(class_scope:protocol.PbftPrepare)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 view_number_;
  ::google::protobuf::int64 sequence_;
  ::google::protobuf::int64 replica_id_;
  ::google::protobuf::internal::ArenaStringPtr value_digest_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consensus_2eproto();
  friend void protobuf_AssignDesc_consensus_2eproto();
  friend void protobuf_ShutdownFile_consensus_2eproto();

  void InitAsDefaultInstance();
  static PbftPrepare* default_instance_;
};
// -------------------------------------------------------------------

class PbftCommit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.PbftCommit) */ {
 public:
  PbftCommit();
  virtual ~PbftCommit();

  PbftCommit(const PbftCommit& from);

  inline PbftCommit& operator=(const PbftCommit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbftCommit& default_instance();

  void Swap(PbftCommit* other);

  // implements Message ----------------------------------------------

  inline PbftCommit* New() const { return New(NULL); }

  PbftCommit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbftCommit& from);
  void MergeFrom(const PbftCommit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PbftCommit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 view_number = 1;
  void clear_view_number();
  static const int kViewNumberFieldNumber = 1;
  ::google::protobuf::int64 view_number() const;
  void set_view_number(::google::protobuf::int64 value);

  // optional int64 sequence = 2;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::int64 sequence() const;
  void set_sequence(::google::protobuf::int64 value);

  // optional int64 replica_id = 3;
  void clear_replica_id();
  static const int kReplicaIdFieldNumber = 3;
  ::google::protobuf::int64 replica_id() const;
  void set_replica_id(::google::protobuf::int64 value);

  // optional bytes value_digest = 4;
  void clear_value_digest();
  static const int kValueDigestFieldNumber = 4;
  const ::std::string& value_digest() const;
  void set_value_digest(const ::std::string& value);
  void set_value_digest(const char* value);
  void set_value_digest(const void* value, size_t size);
  ::std::string* mutable_value_digest();
  ::std::string* release_value_digest();
  void set_allocated_value_digest(::std::string* value_digest);

  // @@protoc_insertion_point(class_scope:protocol.PbftCommit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 view_number_;
  ::google::protobuf::int64 sequence_;
  ::google::protobuf::int64 replica_id_;
  ::google::protobuf::internal::ArenaStringPtr value_digest_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consensus_2eproto();
  friend void protobuf_AssignDesc_consensus_2eproto();
  friend void protobuf_ShutdownFile_consensus_2eproto();

  void InitAsDefaultInstance();
  static PbftCommit* default_instance_;
};
// -------------------------------------------------------------------

class PbftPreparedSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.PbftPreparedSet) */ {
 public:
  PbftPreparedSet();
  virtual ~PbftPreparedSet();

  PbftPreparedSet(const PbftPreparedSet& from);

  inline PbftPreparedSet& operator=(const PbftPreparedSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbftPreparedSet& default_instance();

  void Swap(PbftPreparedSet* other);

  // implements Message ----------------------------------------------

  inline PbftPreparedSet* New() const { return New(NULL); }

  PbftPreparedSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbftPreparedSet& from);
  void MergeFrom(const PbftPreparedSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PbftPreparedSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.PbftEnv pre_prepare = 1;
  bool has_pre_prepare() const;
  void clear_pre_prepare();
  static const int kPrePrepareFieldNumber = 1;
  const ::protocol::PbftEnv& pre_prepare() const;
  ::protocol::PbftEnv* mutable_pre_prepare();
  ::protocol::PbftEnv* release_pre_prepare();
  void set_allocated_pre_prepare(::protocol::PbftEnv* pre_prepare);

  // repeated .protocol.PbftEnv prepare = 2;
  int prepare_size() const;
  void clear_prepare();
  static const int kPrepareFieldNumber = 2;
  const ::protocol::PbftEnv& prepare(int index) const;
  ::protocol::PbftEnv* mutable_prepare(int index);
  ::protocol::PbftEnv* add_prepare();
  ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >*
      mutable_prepare();
  const ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >&
      prepare() const;

  // @@protoc_insertion_point(class_scope:protocol.PbftPreparedSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::protocol::PbftEnv* pre_prepare_;
  ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv > prepare_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consensus_2eproto();
  friend void protobuf_AssignDesc_consensus_2eproto();
  friend void protobuf_ShutdownFile_consensus_2eproto();

  void InitAsDefaultInstance();
  static PbftPreparedSet* default_instance_;
};
// -------------------------------------------------------------------

class PbftViewChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.PbftViewChange) */ {
 public:
  PbftViewChange();
  virtual ~PbftViewChange();

  PbftViewChange(const PbftViewChange& from);

  inline PbftViewChange& operator=(const PbftViewChange& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbftViewChange& default_instance();

  void Swap(PbftViewChange* other);

  // implements Message ----------------------------------------------

  inline PbftViewChange* New() const { return New(NULL); }

  PbftViewChange* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbftViewChange& from);
  void MergeFrom(const PbftViewChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PbftViewChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 view_number = 1;
  void clear_view_number();
  static const int kViewNumberFieldNumber = 1;
  ::google::protobuf::int64 view_number() const;
  void set_view_number(::google::protobuf::int64 value);

  // optional int64 sequence = 2;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::int64 sequence() const;
  void set_sequence(::google::protobuf::int64 value);

  // optional bytes prepred_value_digest = 3;
  void clear_prepred_value_digest();
  static const int kPrepredValueDigestFieldNumber = 3;
  const ::std::string& prepred_value_digest() const;
  void set_prepred_value_digest(const ::std::string& value);
  void set_prepred_value_digest(const char* value);
  void set_prepred_value_digest(const void* value, size_t size);
  ::std::string* mutable_prepred_value_digest();
  ::std::string* release_prepred_value_digest();
  void set_allocated_prepred_value_digest(::std::string* prepred_value_digest);

  // optional int64 replica_id = 4;
  void clear_replica_id();
  static const int kReplicaIdFieldNumber = 4;
  ::google::protobuf::int64 replica_id() const;
  void set_replica_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.PbftViewChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 view_number_;
  ::google::protobuf::int64 sequence_;
  ::google::protobuf::internal::ArenaStringPtr prepred_value_digest_;
  ::google::protobuf::int64 replica_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consensus_2eproto();
  friend void protobuf_AssignDesc_consensus_2eproto();
  friend void protobuf_ShutdownFile_consensus_2eproto();

  void InitAsDefaultInstance();
  static PbftViewChange* default_instance_;
};
// -------------------------------------------------------------------

class PbftViewChangeWithRawValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.PbftViewChangeWithRawValue) */ {
 public:
  PbftViewChangeWithRawValue();
  virtual ~PbftViewChangeWithRawValue();

  PbftViewChangeWithRawValue(const PbftViewChangeWithRawValue& from);

  inline PbftViewChangeWithRawValue& operator=(const PbftViewChangeWithRawValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbftViewChangeWithRawValue& default_instance();

  void Swap(PbftViewChangeWithRawValue* other);

  // implements Message ----------------------------------------------

  inline PbftViewChangeWithRawValue* New() const { return New(NULL); }

  PbftViewChangeWithRawValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbftViewChangeWithRawValue& from);
  void MergeFrom(const PbftViewChangeWithRawValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PbftViewChangeWithRawValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.PbftEnv view_change_env = 1;
  bool has_view_change_env() const;
  void clear_view_change_env();
  static const int kViewChangeEnvFieldNumber = 1;
  const ::protocol::PbftEnv& view_change_env() const;
  ::protocol::PbftEnv* mutable_view_change_env();
  ::protocol::PbftEnv* release_view_change_env();
  void set_allocated_view_change_env(::protocol::PbftEnv* view_change_env);

  // optional .protocol.PbftPreparedSet prepared_set = 2;
  bool has_prepared_set() const;
  void clear_prepared_set();
  static const int kPreparedSetFieldNumber = 2;
  const ::protocol::PbftPreparedSet& prepared_set() const;
  ::protocol::PbftPreparedSet* mutable_prepared_set();
  ::protocol::PbftPreparedSet* release_prepared_set();
  void set_allocated_prepared_set(::protocol::PbftPreparedSet* prepared_set);

  // @@protoc_insertion_point(class_scope:protocol.PbftViewChangeWithRawValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::protocol::PbftEnv* view_change_env_;
  ::protocol::PbftPreparedSet* prepared_set_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consensus_2eproto();
  friend void protobuf_AssignDesc_consensus_2eproto();
  friend void protobuf_ShutdownFile_consensus_2eproto();

  void InitAsDefaultInstance();
  static PbftViewChangeWithRawValue* default_instance_;
};
// -------------------------------------------------------------------

class PbftNewView : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.PbftNewView) */ {
 public:
  PbftNewView();
  virtual ~PbftNewView();

  PbftNewView(const PbftNewView& from);

  inline PbftNewView& operator=(const PbftNewView& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbftNewView& default_instance();

  void Swap(PbftNewView* other);

  // implements Message ----------------------------------------------

  inline PbftNewView* New() const { return New(NULL); }

  PbftNewView* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbftNewView& from);
  void MergeFrom(const PbftNewView& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PbftNewView* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 view_number = 1;
  void clear_view_number();
  static const int kViewNumberFieldNumber = 1;
  ::google::protobuf::int64 view_number() const;
  void set_view_number(::google::protobuf::int64 value);

  // optional int64 sequence = 2;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::int64 sequence() const;
  void set_sequence(::google::protobuf::int64 value);

  // optional int64 replica_id = 3;
  void clear_replica_id();
  static const int kReplicaIdFieldNumber = 3;
  ::google::protobuf::int64 replica_id() const;
  void set_replica_id(::google::protobuf::int64 value);

  // repeated .protocol.PbftEnv view_changes = 4;
  int view_changes_size() const;
  void clear_view_changes();
  static const int kViewChangesFieldNumber = 4;
  const ::protocol::PbftEnv& view_changes(int index) const;
  ::protocol::PbftEnv* mutable_view_changes(int index);
  ::protocol::PbftEnv* add_view_changes();
  ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >*
      mutable_view_changes();
  const ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >&
      view_changes() const;

  // optional .protocol.PbftEnv pre_prepare = 5;
  bool has_pre_prepare() const;
  void clear_pre_prepare();
  static const int kPrePrepareFieldNumber = 5;
  const ::protocol::PbftEnv& pre_prepare() const;
  ::protocol::PbftEnv* mutable_pre_prepare();
  ::protocol::PbftEnv* release_pre_prepare();
  void set_allocated_pre_prepare(::protocol::PbftEnv* pre_prepare);

  // @@protoc_insertion_point(class_scope:protocol.PbftNewView)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 view_number_;
  ::google::protobuf::int64 sequence_;
  ::google::protobuf::int64 replica_id_;
  ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv > view_changes_;
  ::protocol::PbftEnv* pre_prepare_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consensus_2eproto();
  friend void protobuf_AssignDesc_consensus_2eproto();
  friend void protobuf_ShutdownFile_consensus_2eproto();

  void InitAsDefaultInstance();
  static PbftNewView* default_instance_;
};
// -------------------------------------------------------------------

class Pbft : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Pbft) */ {
 public:
  Pbft();
  virtual ~Pbft();

  Pbft(const Pbft& from);

  inline Pbft& operator=(const Pbft& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pbft& default_instance();

  void Swap(Pbft* other);

  // implements Message ----------------------------------------------

  inline Pbft* New() const { return New(NULL); }

  Pbft* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pbft& from);
  void MergeFrom(const Pbft& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pbft* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 round_number = 1;
  void clear_round_number();
  static const int kRoundNumberFieldNumber = 1;
  ::google::protobuf::int64 round_number() const;
  void set_round_number(::google::protobuf::int64 value);

  // optional .protocol.PbftMessageType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::protocol::PbftMessageType type() const;
  void set_type(::protocol::PbftMessageType value);

  // optional .protocol.PbftPrePrepare pre_prepare = 3;
  bool has_pre_prepare() const;
  void clear_pre_prepare();
  static const int kPrePrepareFieldNumber = 3;
  const ::protocol::PbftPrePrepare& pre_prepare() const;
  ::protocol::PbftPrePrepare* mutable_pre_prepare();
  ::protocol::PbftPrePrepare* release_pre_prepare();
  void set_allocated_pre_prepare(::protocol::PbftPrePrepare* pre_prepare);

  // optional .protocol.PbftPrepare prepare = 4;
  bool has_prepare() const;
  void clear_prepare();
  static const int kPrepareFieldNumber = 4;
  const ::protocol::PbftPrepare& prepare() const;
  ::protocol::PbftPrepare* mutable_prepare();
  ::protocol::PbftPrepare* release_prepare();
  void set_allocated_prepare(::protocol::PbftPrepare* prepare);

  // optional .protocol.PbftCommit commit = 5;
  bool has_commit() const;
  void clear_commit();
  static const int kCommitFieldNumber = 5;
  const ::protocol::PbftCommit& commit() const;
  ::protocol::PbftCommit* mutable_commit();
  ::protocol::PbftCommit* release_commit();
  void set_allocated_commit(::protocol::PbftCommit* commit);

  // optional .protocol.PbftViewChange view_change = 6;
  bool has_view_change() const;
  void clear_view_change();
  static const int kViewChangeFieldNumber = 6;
  const ::protocol::PbftViewChange& view_change() const;
  ::protocol::PbftViewChange* mutable_view_change();
  ::protocol::PbftViewChange* release_view_change();
  void set_allocated_view_change(::protocol::PbftViewChange* view_change);

  // optional .protocol.PbftNewView new_view = 7;
  bool has_new_view() const;
  void clear_new_view();
  static const int kNewViewFieldNumber = 7;
  const ::protocol::PbftNewView& new_view() const;
  ::protocol::PbftNewView* mutable_new_view();
  ::protocol::PbftNewView* release_new_view();
  void set_allocated_new_view(::protocol::PbftNewView* new_view);

  // optional .protocol.PbftViewChangeWithRawValue view_change_with_rawvalue = 8;
  bool has_view_change_with_rawvalue() const;
  void clear_view_change_with_rawvalue();
  static const int kViewChangeWithRawvalueFieldNumber = 8;
  const ::protocol::PbftViewChangeWithRawValue& view_change_with_rawvalue() const;
  ::protocol::PbftViewChangeWithRawValue* mutable_view_change_with_rawvalue();
  ::protocol::PbftViewChangeWithRawValue* release_view_change_with_rawvalue();
  void set_allocated_view_change_with_rawvalue(::protocol::PbftViewChangeWithRawValue* view_change_with_rawvalue);

  // optional int64 chain_id = 9;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 9;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Pbft)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 round_number_;
  ::protocol::PbftPrePrepare* pre_prepare_;
  ::protocol::PbftPrepare* prepare_;
  ::protocol::PbftCommit* commit_;
  ::protocol::PbftViewChange* view_change_;
  ::protocol::PbftNewView* new_view_;
  ::protocol::PbftViewChangeWithRawValue* view_change_with_rawvalue_;
  ::google::protobuf::int64 chain_id_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consensus_2eproto();
  friend void protobuf_AssignDesc_consensus_2eproto();
  friend void protobuf_ShutdownFile_consensus_2eproto();

  void InitAsDefaultInstance();
  static Pbft* default_instance_;
};
// -------------------------------------------------------------------

class PbftEnv : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.PbftEnv) */ {
 public:
  PbftEnv();
  virtual ~PbftEnv();

  PbftEnv(const PbftEnv& from);

  inline PbftEnv& operator=(const PbftEnv& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbftEnv& default_instance();

  void Swap(PbftEnv* other);

  // implements Message ----------------------------------------------

  inline PbftEnv* New() const { return New(NULL); }

  PbftEnv* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbftEnv& from);
  void MergeFrom(const PbftEnv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PbftEnv* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.Pbft pbft = 1;
  bool has_pbft() const;
  void clear_pbft();
  static const int kPbftFieldNumber = 1;
  const ::protocol::Pbft& pbft() const;
  ::protocol::Pbft* mutable_pbft();
  ::protocol::Pbft* release_pbft();
  void set_allocated_pbft(::protocol::Pbft* pbft);

  // optional .protocol.Signature signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  const ::protocol::Signature& signature() const;
  ::protocol::Signature* mutable_signature();
  ::protocol::Signature* release_signature();
  void set_allocated_signature(::protocol::Signature* signature);

  // @@protoc_insertion_point(class_scope:protocol.PbftEnv)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::protocol::Pbft* pbft_;
  ::protocol::Signature* signature_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consensus_2eproto();
  friend void protobuf_AssignDesc_consensus_2eproto();
  friend void protobuf_ShutdownFile_consensus_2eproto();

  void InitAsDefaultInstance();
  static PbftEnv* default_instance_;
};
// -------------------------------------------------------------------

class Validator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Validator) */ {
 public:
  Validator();
  virtual ~Validator();

  Validator(const Validator& from);

  inline Validator& operator=(const Validator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Validator& default_instance();

  void Swap(Validator* other);

  // implements Message ----------------------------------------------

  inline Validator* New() const { return New(NULL); }

  Validator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Validator& from);
  void MergeFrom(const Validator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Validator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional int64 pledge_coin_amount = 2;
  void clear_pledge_coin_amount();
  static const int kPledgeCoinAmountFieldNumber = 2;
  ::google::protobuf::int64 pledge_coin_amount() const;
  void set_pledge_coin_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Validator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int64 pledge_coin_amount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consensus_2eproto();
  friend void protobuf_AssignDesc_consensus_2eproto();
  friend void protobuf_ShutdownFile_consensus_2eproto();

  void InitAsDefaultInstance();
  static Validator* default_instance_;
};
// -------------------------------------------------------------------

class ValidatorSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.ValidatorSet) */ {
 public:
  ValidatorSet();
  virtual ~ValidatorSet();

  ValidatorSet(const ValidatorSet& from);

  inline ValidatorSet& operator=(const ValidatorSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidatorSet& default_instance();

  void Swap(ValidatorSet* other);

  // implements Message ----------------------------------------------

  inline ValidatorSet* New() const { return New(NULL); }

  ValidatorSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ValidatorSet& from);
  void MergeFrom(const ValidatorSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ValidatorSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.Validator validators = 1;
  int validators_size() const;
  void clear_validators();
  static const int kValidatorsFieldNumber = 1;
  const ::protocol::Validator& validators(int index) const;
  ::protocol::Validator* mutable_validators(int index);
  ::protocol::Validator* add_validators();
  ::google::protobuf::RepeatedPtrField< ::protocol::Validator >*
      mutable_validators();
  const ::google::protobuf::RepeatedPtrField< ::protocol::Validator >&
      validators() const;

  // @@protoc_insertion_point(class_scope:protocol.ValidatorSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::protocol::Validator > validators_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consensus_2eproto();
  friend void protobuf_AssignDesc_consensus_2eproto();
  friend void protobuf_ShutdownFile_consensus_2eproto();

  void InitAsDefaultInstance();
  static ValidatorSet* default_instance_;
};
// -------------------------------------------------------------------

class PbftProof : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.PbftProof) */ {
 public:
  PbftProof();
  virtual ~PbftProof();

  PbftProof(const PbftProof& from);

  inline PbftProof& operator=(const PbftProof& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbftProof& default_instance();

  void Swap(PbftProof* other);

  // implements Message ----------------------------------------------

  inline PbftProof* New() const { return New(NULL); }

  PbftProof* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbftProof& from);
  void MergeFrom(const PbftProof& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PbftProof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.PbftEnv commits = 1;
  int commits_size() const;
  void clear_commits();
  static const int kCommitsFieldNumber = 1;
  const ::protocol::PbftEnv& commits(int index) const;
  ::protocol::PbftEnv* mutable_commits(int index);
  ::protocol::PbftEnv* add_commits();
  ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >*
      mutable_commits();
  const ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >&
      commits() const;

  // @@protoc_insertion_point(class_scope:protocol.PbftProof)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv > commits_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consensus_2eproto();
  friend void protobuf_AssignDesc_consensus_2eproto();
  friend void protobuf_ShutdownFile_consensus_2eproto();

  void InitAsDefaultInstance();
  static PbftProof* default_instance_;
};
// -------------------------------------------------------------------

class FeeConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.FeeConfig) */ {
 public:
  FeeConfig();
  virtual ~FeeConfig();

  FeeConfig(const FeeConfig& from);

  inline FeeConfig& operator=(const FeeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeeConfig& default_instance();

  void Swap(FeeConfig* other);

  // implements Message ----------------------------------------------

  inline FeeConfig* New() const { return New(NULL); }

  FeeConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeeConfig& from);
  void MergeFrom(const FeeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeeConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FeeConfig_Type Type;
  static const Type UNKNOWN =
    FeeConfig_Type_UNKNOWN;
  static const Type GAS_PRICE =
    FeeConfig_Type_GAS_PRICE;
  static const Type BASE_RESERVE =
    FeeConfig_Type_BASE_RESERVE;
  static inline bool Type_IsValid(int value) {
    return FeeConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    FeeConfig_Type_Type_MIN;
  static const Type Type_MAX =
    FeeConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    FeeConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return FeeConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return FeeConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return FeeConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 gas_price = 1;
  void clear_gas_price();
  static const int kGasPriceFieldNumber = 1;
  ::google::protobuf::int64 gas_price() const;
  void set_gas_price(::google::protobuf::int64 value);

  // optional int64 base_reserve = 2;
  void clear_base_reserve();
  static const int kBaseReserveFieldNumber = 2;
  ::google::protobuf::int64 base_reserve() const;
  void set_base_reserve(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.FeeConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 gas_price_;
  ::google::protobuf::int64 base_reserve_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consensus_2eproto();
  friend void protobuf_AssignDesc_consensus_2eproto();
  friend void protobuf_ShutdownFile_consensus_2eproto();

  void InitAsDefaultInstance();
  static FeeConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PbftPrePrepare

// optional int64 view_number = 1;
inline void PbftPrePrepare::clear_view_number() {
  view_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftPrePrepare::view_number() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrePrepare.view_number)
  return view_number_;
}
inline void PbftPrePrepare::set_view_number(::google::protobuf::int64 value) {
  
  view_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftPrePrepare.view_number)
}

// optional int64 sequence = 2;
inline void PbftPrePrepare::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftPrePrepare::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrePrepare.sequence)
  return sequence_;
}
inline void PbftPrePrepare::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftPrePrepare.sequence)
}

// optional int64 replica_id = 3;
inline void PbftPrePrepare::clear_replica_id() {
  replica_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftPrePrepare::replica_id() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrePrepare.replica_id)
  return replica_id_;
}
inline void PbftPrePrepare::set_replica_id(::google::protobuf::int64 value) {
  
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftPrePrepare.replica_id)
}

// optional bytes value = 4;
inline void PbftPrePrepare::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbftPrePrepare::value() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrePrepare.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbftPrePrepare::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PbftPrePrepare.value)
}
inline void PbftPrePrepare::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PbftPrePrepare.value)
}
inline void PbftPrePrepare::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PbftPrePrepare.value)
}
inline ::std::string* PbftPrePrepare::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:protocol.PbftPrePrepare.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbftPrePrepare::release_value() {
  // @@protoc_insertion_point(field_release:protocol.PbftPrePrepare.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbftPrePrepare::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftPrePrepare.value)
}

// optional bytes value_digest = 5;
inline void PbftPrePrepare::clear_value_digest() {
  value_digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbftPrePrepare::value_digest() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrePrepare.value_digest)
  return value_digest_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbftPrePrepare::set_value_digest(const ::std::string& value) {
  
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PbftPrePrepare.value_digest)
}
inline void PbftPrePrepare::set_value_digest(const char* value) {
  
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PbftPrePrepare.value_digest)
}
inline void PbftPrePrepare::set_value_digest(const void* value, size_t size) {
  
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PbftPrePrepare.value_digest)
}
inline ::std::string* PbftPrePrepare::mutable_value_digest() {
  
  // @@protoc_insertion_point(field_mutable:protocol.PbftPrePrepare.value_digest)
  return value_digest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbftPrePrepare::release_value_digest() {
  // @@protoc_insertion_point(field_release:protocol.PbftPrePrepare.value_digest)
  
  return value_digest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbftPrePrepare::set_allocated_value_digest(::std::string* value_digest) {
  if (value_digest != NULL) {
    
  } else {
    
  }
  value_digest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_digest);
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftPrePrepare.value_digest)
}

// -------------------------------------------------------------------

// PbftPrepare

// optional int64 view_number = 1;
inline void PbftPrepare::clear_view_number() {
  view_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftPrepare::view_number() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrepare.view_number)
  return view_number_;
}
inline void PbftPrepare::set_view_number(::google::protobuf::int64 value) {
  
  view_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftPrepare.view_number)
}

// optional int64 sequence = 2;
inline void PbftPrepare::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftPrepare::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrepare.sequence)
  return sequence_;
}
inline void PbftPrepare::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftPrepare.sequence)
}

// optional int64 replica_id = 3;
inline void PbftPrepare::clear_replica_id() {
  replica_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftPrepare::replica_id() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrepare.replica_id)
  return replica_id_;
}
inline void PbftPrepare::set_replica_id(::google::protobuf::int64 value) {
  
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftPrepare.replica_id)
}

// optional bytes value_digest = 4;
inline void PbftPrepare::clear_value_digest() {
  value_digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbftPrepare::value_digest() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrepare.value_digest)
  return value_digest_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbftPrepare::set_value_digest(const ::std::string& value) {
  
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PbftPrepare.value_digest)
}
inline void PbftPrepare::set_value_digest(const char* value) {
  
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PbftPrepare.value_digest)
}
inline void PbftPrepare::set_value_digest(const void* value, size_t size) {
  
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PbftPrepare.value_digest)
}
inline ::std::string* PbftPrepare::mutable_value_digest() {
  
  // @@protoc_insertion_point(field_mutable:protocol.PbftPrepare.value_digest)
  return value_digest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbftPrepare::release_value_digest() {
  // @@protoc_insertion_point(field_release:protocol.PbftPrepare.value_digest)
  
  return value_digest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbftPrepare::set_allocated_value_digest(::std::string* value_digest) {
  if (value_digest != NULL) {
    
  } else {
    
  }
  value_digest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_digest);
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftPrepare.value_digest)
}

// -------------------------------------------------------------------

// PbftCommit

// optional int64 view_number = 1;
inline void PbftCommit::clear_view_number() {
  view_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftCommit::view_number() const {
  // @@protoc_insertion_point(field_get:protocol.PbftCommit.view_number)
  return view_number_;
}
inline void PbftCommit::set_view_number(::google::protobuf::int64 value) {
  
  view_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftCommit.view_number)
}

// optional int64 sequence = 2;
inline void PbftCommit::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftCommit::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.PbftCommit.sequence)
  return sequence_;
}
inline void PbftCommit::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftCommit.sequence)
}

// optional int64 replica_id = 3;
inline void PbftCommit::clear_replica_id() {
  replica_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftCommit::replica_id() const {
  // @@protoc_insertion_point(field_get:protocol.PbftCommit.replica_id)
  return replica_id_;
}
inline void PbftCommit::set_replica_id(::google::protobuf::int64 value) {
  
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftCommit.replica_id)
}

// optional bytes value_digest = 4;
inline void PbftCommit::clear_value_digest() {
  value_digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbftCommit::value_digest() const {
  // @@protoc_insertion_point(field_get:protocol.PbftCommit.value_digest)
  return value_digest_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbftCommit::set_value_digest(const ::std::string& value) {
  
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PbftCommit.value_digest)
}
inline void PbftCommit::set_value_digest(const char* value) {
  
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PbftCommit.value_digest)
}
inline void PbftCommit::set_value_digest(const void* value, size_t size) {
  
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PbftCommit.value_digest)
}
inline ::std::string* PbftCommit::mutable_value_digest() {
  
  // @@protoc_insertion_point(field_mutable:protocol.PbftCommit.value_digest)
  return value_digest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbftCommit::release_value_digest() {
  // @@protoc_insertion_point(field_release:protocol.PbftCommit.value_digest)
  
  return value_digest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbftCommit::set_allocated_value_digest(::std::string* value_digest) {
  if (value_digest != NULL) {
    
  } else {
    
  }
  value_digest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_digest);
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftCommit.value_digest)
}

// -------------------------------------------------------------------

// PbftPreparedSet

// optional .protocol.PbftEnv pre_prepare = 1;
inline bool PbftPreparedSet::has_pre_prepare() const {
  return !_is_default_instance_ && pre_prepare_ != NULL;
}
inline void PbftPreparedSet::clear_pre_prepare() {
  if (GetArenaNoVirtual() == NULL && pre_prepare_ != NULL) delete pre_prepare_;
  pre_prepare_ = NULL;
}
inline const ::protocol::PbftEnv& PbftPreparedSet::pre_prepare() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPreparedSet.pre_prepare)
  return pre_prepare_ != NULL ? *pre_prepare_ : *default_instance_->pre_prepare_;
}
inline ::protocol::PbftEnv* PbftPreparedSet::mutable_pre_prepare() {
  
  if (pre_prepare_ == NULL) {
    pre_prepare_ = new ::protocol::PbftEnv;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PbftPreparedSet.pre_prepare)
  return pre_prepare_;
}
inline ::protocol::PbftEnv* PbftPreparedSet::release_pre_prepare() {
  // @@protoc_insertion_point(field_release:protocol.PbftPreparedSet.pre_prepare)
  
  ::protocol::PbftEnv* temp = pre_prepare_;
  pre_prepare_ = NULL;
  return temp;
}
inline void PbftPreparedSet::set_allocated_pre_prepare(::protocol::PbftEnv* pre_prepare) {
  delete pre_prepare_;
  pre_prepare_ = pre_prepare;
  if (pre_prepare) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftPreparedSet.pre_prepare)
}

// repeated .protocol.PbftEnv prepare = 2;
inline int PbftPreparedSet::prepare_size() const {
  return prepare_.size();
}
inline void PbftPreparedSet::clear_prepare() {
  prepare_.Clear();
}
inline const ::protocol::PbftEnv& PbftPreparedSet::prepare(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PbftPreparedSet.prepare)
  return prepare_.Get(index);
}
inline ::protocol::PbftEnv* PbftPreparedSet::mutable_prepare(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PbftPreparedSet.prepare)
  return prepare_.Mutable(index);
}
inline ::protocol::PbftEnv* PbftPreparedSet::add_prepare() {
  // @@protoc_insertion_point(field_add:protocol.PbftPreparedSet.prepare)
  return prepare_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >*
PbftPreparedSet::mutable_prepare() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PbftPreparedSet.prepare)
  return &prepare_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >&
PbftPreparedSet::prepare() const {
  // @@protoc_insertion_point(field_list:protocol.PbftPreparedSet.prepare)
  return prepare_;
}

// -------------------------------------------------------------------

// PbftViewChange

// optional int64 view_number = 1;
inline void PbftViewChange::clear_view_number() {
  view_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftViewChange::view_number() const {
  // @@protoc_insertion_point(field_get:protocol.PbftViewChange.view_number)
  return view_number_;
}
inline void PbftViewChange::set_view_number(::google::protobuf::int64 value) {
  
  view_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftViewChange.view_number)
}

// optional int64 sequence = 2;
inline void PbftViewChange::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftViewChange::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.PbftViewChange.sequence)
  return sequence_;
}
inline void PbftViewChange::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftViewChange.sequence)
}

// optional bytes prepred_value_digest = 3;
inline void PbftViewChange::clear_prepred_value_digest() {
  prepred_value_digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbftViewChange::prepred_value_digest() const {
  // @@protoc_insertion_point(field_get:protocol.PbftViewChange.prepred_value_digest)
  return prepred_value_digest_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbftViewChange::set_prepred_value_digest(const ::std::string& value) {
  
  prepred_value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PbftViewChange.prepred_value_digest)
}
inline void PbftViewChange::set_prepred_value_digest(const char* value) {
  
  prepred_value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PbftViewChange.prepred_value_digest)
}
inline void PbftViewChange::set_prepred_value_digest(const void* value, size_t size) {
  
  prepred_value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PbftViewChange.prepred_value_digest)
}
inline ::std::string* PbftViewChange::mutable_prepred_value_digest() {
  
  // @@protoc_insertion_point(field_mutable:protocol.PbftViewChange.prepred_value_digest)
  return prepred_value_digest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbftViewChange::release_prepred_value_digest() {
  // @@protoc_insertion_point(field_release:protocol.PbftViewChange.prepred_value_digest)
  
  return prepred_value_digest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbftViewChange::set_allocated_prepred_value_digest(::std::string* prepred_value_digest) {
  if (prepred_value_digest != NULL) {
    
  } else {
    
  }
  prepred_value_digest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prepred_value_digest);
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftViewChange.prepred_value_digest)
}

// optional int64 replica_id = 4;
inline void PbftViewChange::clear_replica_id() {
  replica_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftViewChange::replica_id() const {
  // @@protoc_insertion_point(field_get:protocol.PbftViewChange.replica_id)
  return replica_id_;
}
inline void PbftViewChange::set_replica_id(::google::protobuf::int64 value) {
  
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftViewChange.replica_id)
}

// -------------------------------------------------------------------

// PbftViewChangeWithRawValue

// optional .protocol.PbftEnv view_change_env = 1;
inline bool PbftViewChangeWithRawValue::has_view_change_env() const {
  return !_is_default_instance_ && view_change_env_ != NULL;
}
inline void PbftViewChangeWithRawValue::clear_view_change_env() {
  if (GetArenaNoVirtual() == NULL && view_change_env_ != NULL) delete view_change_env_;
  view_change_env_ = NULL;
}
inline const ::protocol::PbftEnv& PbftViewChangeWithRawValue::view_change_env() const {
  // @@protoc_insertion_point(field_get:protocol.PbftViewChangeWithRawValue.view_change_env)
  return view_change_env_ != NULL ? *view_change_env_ : *default_instance_->view_change_env_;
}
inline ::protocol::PbftEnv* PbftViewChangeWithRawValue::mutable_view_change_env() {
  
  if (view_change_env_ == NULL) {
    view_change_env_ = new ::protocol::PbftEnv;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PbftViewChangeWithRawValue.view_change_env)
  return view_change_env_;
}
inline ::protocol::PbftEnv* PbftViewChangeWithRawValue::release_view_change_env() {
  // @@protoc_insertion_point(field_release:protocol.PbftViewChangeWithRawValue.view_change_env)
  
  ::protocol::PbftEnv* temp = view_change_env_;
  view_change_env_ = NULL;
  return temp;
}
inline void PbftViewChangeWithRawValue::set_allocated_view_change_env(::protocol::PbftEnv* view_change_env) {
  delete view_change_env_;
  view_change_env_ = view_change_env;
  if (view_change_env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftViewChangeWithRawValue.view_change_env)
}

// optional .protocol.PbftPreparedSet prepared_set = 2;
inline bool PbftViewChangeWithRawValue::has_prepared_set() const {
  return !_is_default_instance_ && prepared_set_ != NULL;
}
inline void PbftViewChangeWithRawValue::clear_prepared_set() {
  if (GetArenaNoVirtual() == NULL && prepared_set_ != NULL) delete prepared_set_;
  prepared_set_ = NULL;
}
inline const ::protocol::PbftPreparedSet& PbftViewChangeWithRawValue::prepared_set() const {
  // @@protoc_insertion_point(field_get:protocol.PbftViewChangeWithRawValue.prepared_set)
  return prepared_set_ != NULL ? *prepared_set_ : *default_instance_->prepared_set_;
}
inline ::protocol::PbftPreparedSet* PbftViewChangeWithRawValue::mutable_prepared_set() {
  
  if (prepared_set_ == NULL) {
    prepared_set_ = new ::protocol::PbftPreparedSet;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PbftViewChangeWithRawValue.prepared_set)
  return prepared_set_;
}
inline ::protocol::PbftPreparedSet* PbftViewChangeWithRawValue::release_prepared_set() {
  // @@protoc_insertion_point(field_release:protocol.PbftViewChangeWithRawValue.prepared_set)
  
  ::protocol::PbftPreparedSet* temp = prepared_set_;
  prepared_set_ = NULL;
  return temp;
}
inline void PbftViewChangeWithRawValue::set_allocated_prepared_set(::protocol::PbftPreparedSet* prepared_set) {
  delete prepared_set_;
  prepared_set_ = prepared_set;
  if (prepared_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftViewChangeWithRawValue.prepared_set)
}

// -------------------------------------------------------------------

// PbftNewView

// optional int64 view_number = 1;
inline void PbftNewView::clear_view_number() {
  view_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftNewView::view_number() const {
  // @@protoc_insertion_point(field_get:protocol.PbftNewView.view_number)
  return view_number_;
}
inline void PbftNewView::set_view_number(::google::protobuf::int64 value) {
  
  view_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftNewView.view_number)
}

// optional int64 sequence = 2;
inline void PbftNewView::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftNewView::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.PbftNewView.sequence)
  return sequence_;
}
inline void PbftNewView::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftNewView.sequence)
}

// optional int64 replica_id = 3;
inline void PbftNewView::clear_replica_id() {
  replica_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PbftNewView::replica_id() const {
  // @@protoc_insertion_point(field_get:protocol.PbftNewView.replica_id)
  return replica_id_;
}
inline void PbftNewView::set_replica_id(::google::protobuf::int64 value) {
  
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftNewView.replica_id)
}

// repeated .protocol.PbftEnv view_changes = 4;
inline int PbftNewView::view_changes_size() const {
  return view_changes_.size();
}
inline void PbftNewView::clear_view_changes() {
  view_changes_.Clear();
}
inline const ::protocol::PbftEnv& PbftNewView::view_changes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PbftNewView.view_changes)
  return view_changes_.Get(index);
}
inline ::protocol::PbftEnv* PbftNewView::mutable_view_changes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PbftNewView.view_changes)
  return view_changes_.Mutable(index);
}
inline ::protocol::PbftEnv* PbftNewView::add_view_changes() {
  // @@protoc_insertion_point(field_add:protocol.PbftNewView.view_changes)
  return view_changes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >*
PbftNewView::mutable_view_changes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PbftNewView.view_changes)
  return &view_changes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >&
PbftNewView::view_changes() const {
  // @@protoc_insertion_point(field_list:protocol.PbftNewView.view_changes)
  return view_changes_;
}

// optional .protocol.PbftEnv pre_prepare = 5;
inline bool PbftNewView::has_pre_prepare() const {
  return !_is_default_instance_ && pre_prepare_ != NULL;
}
inline void PbftNewView::clear_pre_prepare() {
  if (GetArenaNoVirtual() == NULL && pre_prepare_ != NULL) delete pre_prepare_;
  pre_prepare_ = NULL;
}
inline const ::protocol::PbftEnv& PbftNewView::pre_prepare() const {
  // @@protoc_insertion_point(field_get:protocol.PbftNewView.pre_prepare)
  return pre_prepare_ != NULL ? *pre_prepare_ : *default_instance_->pre_prepare_;
}
inline ::protocol::PbftEnv* PbftNewView::mutable_pre_prepare() {
  
  if (pre_prepare_ == NULL) {
    pre_prepare_ = new ::protocol::PbftEnv;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PbftNewView.pre_prepare)
  return pre_prepare_;
}
inline ::protocol::PbftEnv* PbftNewView::release_pre_prepare() {
  // @@protoc_insertion_point(field_release:protocol.PbftNewView.pre_prepare)
  
  ::protocol::PbftEnv* temp = pre_prepare_;
  pre_prepare_ = NULL;
  return temp;
}
inline void PbftNewView::set_allocated_pre_prepare(::protocol::PbftEnv* pre_prepare) {
  delete pre_prepare_;
  pre_prepare_ = pre_prepare;
  if (pre_prepare) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftNewView.pre_prepare)
}

// -------------------------------------------------------------------

// Pbft

// optional int64 round_number = 1;
inline void Pbft::clear_round_number() {
  round_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Pbft::round_number() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.round_number)
  return round_number_;
}
inline void Pbft::set_round_number(::google::protobuf::int64 value) {
  
  round_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.Pbft.round_number)
}

// optional .protocol.PbftMessageType type = 2;
inline void Pbft::clear_type() {
  type_ = 0;
}
inline ::protocol::PbftMessageType Pbft::type() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.type)
  return static_cast< ::protocol::PbftMessageType >(type_);
}
inline void Pbft::set_type(::protocol::PbftMessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Pbft.type)
}

// optional .protocol.PbftPrePrepare pre_prepare = 3;
inline bool Pbft::has_pre_prepare() const {
  return !_is_default_instance_ && pre_prepare_ != NULL;
}
inline void Pbft::clear_pre_prepare() {
  if (GetArenaNoVirtual() == NULL && pre_prepare_ != NULL) delete pre_prepare_;
  pre_prepare_ = NULL;
}
inline const ::protocol::PbftPrePrepare& Pbft::pre_prepare() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.pre_prepare)
  return pre_prepare_ != NULL ? *pre_prepare_ : *default_instance_->pre_prepare_;
}
inline ::protocol::PbftPrePrepare* Pbft::mutable_pre_prepare() {
  
  if (pre_prepare_ == NULL) {
    pre_prepare_ = new ::protocol::PbftPrePrepare;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Pbft.pre_prepare)
  return pre_prepare_;
}
inline ::protocol::PbftPrePrepare* Pbft::release_pre_prepare() {
  // @@protoc_insertion_point(field_release:protocol.Pbft.pre_prepare)
  
  ::protocol::PbftPrePrepare* temp = pre_prepare_;
  pre_prepare_ = NULL;
  return temp;
}
inline void Pbft::set_allocated_pre_prepare(::protocol::PbftPrePrepare* pre_prepare) {
  delete pre_prepare_;
  pre_prepare_ = pre_prepare;
  if (pre_prepare) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Pbft.pre_prepare)
}

// optional .protocol.PbftPrepare prepare = 4;
inline bool Pbft::has_prepare() const {
  return !_is_default_instance_ && prepare_ != NULL;
}
inline void Pbft::clear_prepare() {
  if (GetArenaNoVirtual() == NULL && prepare_ != NULL) delete prepare_;
  prepare_ = NULL;
}
inline const ::protocol::PbftPrepare& Pbft::prepare() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.prepare)
  return prepare_ != NULL ? *prepare_ : *default_instance_->prepare_;
}
inline ::protocol::PbftPrepare* Pbft::mutable_prepare() {
  
  if (prepare_ == NULL) {
    prepare_ = new ::protocol::PbftPrepare;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Pbft.prepare)
  return prepare_;
}
inline ::protocol::PbftPrepare* Pbft::release_prepare() {
  // @@protoc_insertion_point(field_release:protocol.Pbft.prepare)
  
  ::protocol::PbftPrepare* temp = prepare_;
  prepare_ = NULL;
  return temp;
}
inline void Pbft::set_allocated_prepare(::protocol::PbftPrepare* prepare) {
  delete prepare_;
  prepare_ = prepare;
  if (prepare) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Pbft.prepare)
}

// optional .protocol.PbftCommit commit = 5;
inline bool Pbft::has_commit() const {
  return !_is_default_instance_ && commit_ != NULL;
}
inline void Pbft::clear_commit() {
  if (GetArenaNoVirtual() == NULL && commit_ != NULL) delete commit_;
  commit_ = NULL;
}
inline const ::protocol::PbftCommit& Pbft::commit() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.commit)
  return commit_ != NULL ? *commit_ : *default_instance_->commit_;
}
inline ::protocol::PbftCommit* Pbft::mutable_commit() {
  
  if (commit_ == NULL) {
    commit_ = new ::protocol::PbftCommit;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Pbft.commit)
  return commit_;
}
inline ::protocol::PbftCommit* Pbft::release_commit() {
  // @@protoc_insertion_point(field_release:protocol.Pbft.commit)
  
  ::protocol::PbftCommit* temp = commit_;
  commit_ = NULL;
  return temp;
}
inline void Pbft::set_allocated_commit(::protocol::PbftCommit* commit) {
  delete commit_;
  commit_ = commit;
  if (commit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Pbft.commit)
}

// optional .protocol.PbftViewChange view_change = 6;
inline bool Pbft::has_view_change() const {
  return !_is_default_instance_ && view_change_ != NULL;
}
inline void Pbft::clear_view_change() {
  if (GetArenaNoVirtual() == NULL && view_change_ != NULL) delete view_change_;
  view_change_ = NULL;
}
inline const ::protocol::PbftViewChange& Pbft::view_change() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.view_change)
  return view_change_ != NULL ? *view_change_ : *default_instance_->view_change_;
}
inline ::protocol::PbftViewChange* Pbft::mutable_view_change() {
  
  if (view_change_ == NULL) {
    view_change_ = new ::protocol::PbftViewChange;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Pbft.view_change)
  return view_change_;
}
inline ::protocol::PbftViewChange* Pbft::release_view_change() {
  // @@protoc_insertion_point(field_release:protocol.Pbft.view_change)
  
  ::protocol::PbftViewChange* temp = view_change_;
  view_change_ = NULL;
  return temp;
}
inline void Pbft::set_allocated_view_change(::protocol::PbftViewChange* view_change) {
  delete view_change_;
  view_change_ = view_change;
  if (view_change) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Pbft.view_change)
}

// optional .protocol.PbftNewView new_view = 7;
inline bool Pbft::has_new_view() const {
  return !_is_default_instance_ && new_view_ != NULL;
}
inline void Pbft::clear_new_view() {
  if (GetArenaNoVirtual() == NULL && new_view_ != NULL) delete new_view_;
  new_view_ = NULL;
}
inline const ::protocol::PbftNewView& Pbft::new_view() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.new_view)
  return new_view_ != NULL ? *new_view_ : *default_instance_->new_view_;
}
inline ::protocol::PbftNewView* Pbft::mutable_new_view() {
  
  if (new_view_ == NULL) {
    new_view_ = new ::protocol::PbftNewView;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Pbft.new_view)
  return new_view_;
}
inline ::protocol::PbftNewView* Pbft::release_new_view() {
  // @@protoc_insertion_point(field_release:protocol.Pbft.new_view)
  
  ::protocol::PbftNewView* temp = new_view_;
  new_view_ = NULL;
  return temp;
}
inline void Pbft::set_allocated_new_view(::protocol::PbftNewView* new_view) {
  delete new_view_;
  new_view_ = new_view;
  if (new_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Pbft.new_view)
}

// optional .protocol.PbftViewChangeWithRawValue view_change_with_rawvalue = 8;
inline bool Pbft::has_view_change_with_rawvalue() const {
  return !_is_default_instance_ && view_change_with_rawvalue_ != NULL;
}
inline void Pbft::clear_view_change_with_rawvalue() {
  if (GetArenaNoVirtual() == NULL && view_change_with_rawvalue_ != NULL) delete view_change_with_rawvalue_;
  view_change_with_rawvalue_ = NULL;
}
inline const ::protocol::PbftViewChangeWithRawValue& Pbft::view_change_with_rawvalue() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.view_change_with_rawvalue)
  return view_change_with_rawvalue_ != NULL ? *view_change_with_rawvalue_ : *default_instance_->view_change_with_rawvalue_;
}
inline ::protocol::PbftViewChangeWithRawValue* Pbft::mutable_view_change_with_rawvalue() {
  
  if (view_change_with_rawvalue_ == NULL) {
    view_change_with_rawvalue_ = new ::protocol::PbftViewChangeWithRawValue;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Pbft.view_change_with_rawvalue)
  return view_change_with_rawvalue_;
}
inline ::protocol::PbftViewChangeWithRawValue* Pbft::release_view_change_with_rawvalue() {
  // @@protoc_insertion_point(field_release:protocol.Pbft.view_change_with_rawvalue)
  
  ::protocol::PbftViewChangeWithRawValue* temp = view_change_with_rawvalue_;
  view_change_with_rawvalue_ = NULL;
  return temp;
}
inline void Pbft::set_allocated_view_change_with_rawvalue(::protocol::PbftViewChangeWithRawValue* view_change_with_rawvalue) {
  delete view_change_with_rawvalue_;
  view_change_with_rawvalue_ = view_change_with_rawvalue;
  if (view_change_with_rawvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Pbft.view_change_with_rawvalue)
}

// optional int64 chain_id = 9;
inline void Pbft::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Pbft::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.chain_id)
  return chain_id_;
}
inline void Pbft::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Pbft.chain_id)
}

// -------------------------------------------------------------------

// PbftEnv

// optional .protocol.Pbft pbft = 1;
inline bool PbftEnv::has_pbft() const {
  return !_is_default_instance_ && pbft_ != NULL;
}
inline void PbftEnv::clear_pbft() {
  if (GetArenaNoVirtual() == NULL && pbft_ != NULL) delete pbft_;
  pbft_ = NULL;
}
inline const ::protocol::Pbft& PbftEnv::pbft() const {
  // @@protoc_insertion_point(field_get:protocol.PbftEnv.pbft)
  return pbft_ != NULL ? *pbft_ : *default_instance_->pbft_;
}
inline ::protocol::Pbft* PbftEnv::mutable_pbft() {
  
  if (pbft_ == NULL) {
    pbft_ = new ::protocol::Pbft;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PbftEnv.pbft)
  return pbft_;
}
inline ::protocol::Pbft* PbftEnv::release_pbft() {
  // @@protoc_insertion_point(field_release:protocol.PbftEnv.pbft)
  
  ::protocol::Pbft* temp = pbft_;
  pbft_ = NULL;
  return temp;
}
inline void PbftEnv::set_allocated_pbft(::protocol::Pbft* pbft) {
  delete pbft_;
  pbft_ = pbft;
  if (pbft) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftEnv.pbft)
}

// optional .protocol.Signature signature = 2;
inline bool PbftEnv::has_signature() const {
  return !_is_default_instance_ && signature_ != NULL;
}
inline void PbftEnv::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) delete signature_;
  signature_ = NULL;
}
inline const ::protocol::Signature& PbftEnv::signature() const {
  // @@protoc_insertion_point(field_get:protocol.PbftEnv.signature)
  return signature_ != NULL ? *signature_ : *default_instance_->signature_;
}
inline ::protocol::Signature* PbftEnv::mutable_signature() {
  
  if (signature_ == NULL) {
    signature_ = new ::protocol::Signature;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PbftEnv.signature)
  return signature_;
}
inline ::protocol::Signature* PbftEnv::release_signature() {
  // @@protoc_insertion_point(field_release:protocol.PbftEnv.signature)
  
  ::protocol::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline void PbftEnv::set_allocated_signature(::protocol::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftEnv.signature)
}

// -------------------------------------------------------------------

// Validator

// optional string address = 1;
inline void Validator::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Validator::address() const {
  // @@protoc_insertion_point(field_get:protocol.Validator.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Validator::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Validator.address)
}
inline void Validator::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Validator.address)
}
inline void Validator::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Validator.address)
}
inline ::std::string* Validator::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Validator.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Validator::release_address() {
  // @@protoc_insertion_point(field_release:protocol.Validator.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Validator::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Validator.address)
}

// optional int64 pledge_coin_amount = 2;
inline void Validator::clear_pledge_coin_amount() {
  pledge_coin_amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Validator::pledge_coin_amount() const {
  // @@protoc_insertion_point(field_get:protocol.Validator.pledge_coin_amount)
  return pledge_coin_amount_;
}
inline void Validator::set_pledge_coin_amount(::google::protobuf::int64 value) {
  
  pledge_coin_amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.Validator.pledge_coin_amount)
}

// -------------------------------------------------------------------

// ValidatorSet

// repeated .protocol.Validator validators = 1;
inline int ValidatorSet::validators_size() const {
  return validators_.size();
}
inline void ValidatorSet::clear_validators() {
  validators_.Clear();
}
inline const ::protocol::Validator& ValidatorSet::validators(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ValidatorSet.validators)
  return validators_.Get(index);
}
inline ::protocol::Validator* ValidatorSet::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.ValidatorSet.validators)
  return validators_.Mutable(index);
}
inline ::protocol::Validator* ValidatorSet::add_validators() {
  // @@protoc_insertion_point(field_add:protocol.ValidatorSet.validators)
  return validators_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::Validator >*
ValidatorSet::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ValidatorSet.validators)
  return &validators_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::Validator >&
ValidatorSet::validators() const {
  // @@protoc_insertion_point(field_list:protocol.ValidatorSet.validators)
  return validators_;
}

// -------------------------------------------------------------------

// PbftProof

// repeated .protocol.PbftEnv commits = 1;
inline int PbftProof::commits_size() const {
  return commits_.size();
}
inline void PbftProof::clear_commits() {
  commits_.Clear();
}
inline const ::protocol::PbftEnv& PbftProof::commits(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PbftProof.commits)
  return commits_.Get(index);
}
inline ::protocol::PbftEnv* PbftProof::mutable_commits(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PbftProof.commits)
  return commits_.Mutable(index);
}
inline ::protocol::PbftEnv* PbftProof::add_commits() {
  // @@protoc_insertion_point(field_add:protocol.PbftProof.commits)
  return commits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >*
PbftProof::mutable_commits() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PbftProof.commits)
  return &commits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >&
PbftProof::commits() const {
  // @@protoc_insertion_point(field_list:protocol.PbftProof.commits)
  return commits_;
}

// -------------------------------------------------------------------

// FeeConfig

// optional int64 gas_price = 1;
inline void FeeConfig::clear_gas_price() {
  gas_price_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FeeConfig::gas_price() const {
  // @@protoc_insertion_point(field_get:protocol.FeeConfig.gas_price)
  return gas_price_;
}
inline void FeeConfig::set_gas_price(::google::protobuf::int64 value) {
  
  gas_price_ = value;
  // @@protoc_insertion_point(field_set:protocol.FeeConfig.gas_price)
}

// optional int64 base_reserve = 2;
inline void FeeConfig::clear_base_reserve() {
  base_reserve_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FeeConfig::base_reserve() const {
  // @@protoc_insertion_point(field_get:protocol.FeeConfig.base_reserve)
  return base_reserve_;
}
inline void FeeConfig::set_base_reserve(::google::protobuf::int64 value) {
  
  base_reserve_ = value;
  // @@protoc_insertion_point(field_set:protocol.FeeConfig.base_reserve)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protocol::FeeConfig_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::FeeConfig_Type>() {
  return ::protocol::FeeConfig_Type_descriptor();
}
template <> struct is_proto_enum< ::protocol::PbftMessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::PbftMessageType>() {
  return ::protocol::PbftMessageType_descriptor();
}
template <> struct is_proto_enum< ::protocol::PbftValueType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::PbftValueType>() {
  return ::protocol::PbftValueType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_consensus_2eproto__INCLUDED
