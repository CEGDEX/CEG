/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('./google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.protocol.Account', null, global);
goog.exportSymbol('proto.protocol.AccountPrivilege', null, global);
goog.exportSymbol('proto.protocol.AccountThreshold', null, global);
goog.exportSymbol('proto.protocol.Asset', null, global);
goog.exportSymbol('proto.protocol.AssetKey', null, global);
goog.exportSymbol('proto.protocol.AssetProperty', null, global);
goog.exportSymbol('proto.protocol.AssetStore', null, global);
goog.exportSymbol('proto.protocol.ConsensusValue', null, global);
goog.exportSymbol('proto.protocol.ConsensusValueValidation', null, global);
goog.exportSymbol('proto.protocol.Contract', null, global);
goog.exportSymbol('proto.protocol.Contract.ContractType', null, global);
goog.exportSymbol('proto.protocol.Ledger', null, global);
goog.exportSymbol('proto.protocol.LedgerHeader', null, global);
goog.exportSymbol('proto.protocol.Limit', null, global);
goog.exportSymbol('proto.protocol.Operation', null, global);
goog.exportSymbol('proto.protocol.Operation.Type', null, global);
goog.exportSymbol('proto.protocol.OperationCreateAccount', null, global);
goog.exportSymbol('proto.protocol.OperationIssueAsset', null, global);
goog.exportSymbol('proto.protocol.OperationLog', null, global);
goog.exportSymbol('proto.protocol.OperationPayAsset', null, global);
goog.exportSymbol('proto.protocol.OperationPayCoin', null, global);
goog.exportSymbol('proto.protocol.OperationSetMetadata', null, global);
goog.exportSymbol('proto.protocol.OperationSetPrivilege', null, global);
goog.exportSymbol('proto.protocol.OperationSetSignerWeight', null, global);
goog.exportSymbol('proto.protocol.OperationSetThreshold', null, global);
goog.exportSymbol('proto.protocol.OperationTypeThreshold', null, global);
goog.exportSymbol('proto.protocol.Signer', null, global);
goog.exportSymbol('proto.protocol.Signer.Limit', null, global);
goog.exportSymbol('proto.protocol.Transaction', null, global);
goog.exportSymbol('proto.protocol.Transaction.Limit', null, global);
goog.exportSymbol('proto.protocol.TransactionEnv', null, global);
goog.exportSymbol('proto.protocol.TransactionEnvSet', null, global);
goog.exportSymbol('proto.protocol.TransactionEnvStore', null, global);
goog.exportSymbol('proto.protocol.Trigger', null, global);
goog.exportSymbol('proto.protocol.Trigger.OperationTrigger', null, global);
goog.exportSymbol('proto.protocol.Trigger.TransactionType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Account.displayName = 'proto.protocol.Account';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    priv: (f = msg.getPriv()) && proto.protocol.AccountPrivilege.toObject(includeInstance, f),
    metadatasHash: msg.getMetadatasHash_asB64(),
    assetsHash: msg.getAssetsHash_asB64(),
    contract: (f = msg.getContract()) && proto.protocol.Contract.toObject(includeInstance, f),
    balance: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Account}
 */
proto.protocol.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Account;
  return proto.protocol.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Account}
 */
proto.protocol.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 3:
      var value = new proto.protocol.AccountPrivilege;
      reader.readMessage(value,proto.protocol.AccountPrivilege.deserializeBinaryFromReader);
      msg.setPriv(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadatasHash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetsHash(value);
      break;
    case 6:
      var value = new proto.protocol.Contract;
      reader.readMessage(value,proto.protocol.Contract.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPriv();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.AccountPrivilege.serializeBinaryToWriter
    );
  }
  f = message.getMetadatasHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getAssetsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.protocol.Contract.serializeBinaryToWriter
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.protocol.Account.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.Account.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 nonce = 2;
 * @return {number}
 */
proto.protocol.Account.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.Account.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional AccountPrivilege priv = 3;
 * @return {?proto.protocol.AccountPrivilege}
 */
proto.protocol.Account.prototype.getPriv = function() {
  return /** @type{?proto.protocol.AccountPrivilege} */ (
    jspb.Message.getWrapperField(this, proto.protocol.AccountPrivilege, 3));
};


/** @param {?proto.protocol.AccountPrivilege|undefined} value */
proto.protocol.Account.prototype.setPriv = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.protocol.Account.prototype.clearPriv = function() {
  this.setPriv(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Account.prototype.hasPriv = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes metadatas_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.Account.prototype.getMetadatasHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes metadatas_hash = 4;
 * This is a type-conversion wrapper around `getMetadatasHash()`
 * @return {string}
 */
proto.protocol.Account.prototype.getMetadatasHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadatasHash()));
};


/**
 * optional bytes metadatas_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadatasHash()`
 * @return {!Uint8Array}
 */
proto.protocol.Account.prototype.getMetadatasHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadatasHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.Account.prototype.setMetadatasHash = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes assets_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.Account.prototype.getAssetsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes assets_hash = 5;
 * This is a type-conversion wrapper around `getAssetsHash()`
 * @return {string}
 */
proto.protocol.Account.prototype.getAssetsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetsHash()));
};


/**
 * optional bytes assets_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetsHash()`
 * @return {!Uint8Array}
 */
proto.protocol.Account.prototype.getAssetsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetsHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.Account.prototype.setAssetsHash = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional Contract contract = 6;
 * @return {?proto.protocol.Contract}
 */
proto.protocol.Account.prototype.getContract = function() {
  return /** @type{?proto.protocol.Contract} */ (
    jspb.Message.getWrapperField(this, proto.protocol.Contract, 6));
};


/** @param {?proto.protocol.Contract|undefined} value */
proto.protocol.Account.prototype.setContract = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.protocol.Account.prototype.clearContract = function() {
  this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Account.prototype.hasContract = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 balance = 7;
 * @return {number}
 */
proto.protocol.Account.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.Account.prototype.setBalance = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.AssetKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.AssetKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.AssetKey.displayName = 'proto.protocol.AssetKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.AssetKey.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.AssetKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.AssetKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.AssetKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.AssetKey}
 */
proto.protocol.AssetKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.AssetKey;
  return proto.protocol.AssetKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.AssetKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.AssetKey}
 */
proto.protocol.AssetKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.AssetKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.AssetKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.AssetKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.AssetKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string issuer = 1;
 * @return {string}
 */
proto.protocol.AssetKey.prototype.getIssuer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.AssetKey.prototype.setIssuer = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.protocol.AssetKey.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.AssetKey.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 type = 3;
 * @return {number}
 */
proto.protocol.AssetKey.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.AssetKey.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Asset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Asset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Asset.displayName = 'proto.protocol.Asset';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Asset.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Asset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Asset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Asset.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.protocol.AssetKey.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Asset}
 */
proto.protocol.Asset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Asset;
  return proto.protocol.Asset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Asset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Asset}
 */
proto.protocol.Asset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.AssetKey;
      reader.readMessage(value,proto.protocol.AssetKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Asset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Asset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Asset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Asset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.AssetKey.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional AssetKey key = 1;
 * @return {?proto.protocol.AssetKey}
 */
proto.protocol.Asset.prototype.getKey = function() {
  return /** @type{?proto.protocol.AssetKey} */ (
    jspb.Message.getWrapperField(this, proto.protocol.AssetKey, 1));
};


/** @param {?proto.protocol.AssetKey|undefined} value */
proto.protocol.Asset.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protocol.Asset.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Asset.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.protocol.Asset.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.Asset.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.AssetProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.AssetProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.AssetProperty.displayName = 'proto.protocol.AssetProperty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.AssetProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.AssetProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.AssetProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.AssetProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    decimal: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    maxSupply: jspb.Message.getFieldWithDefault(msg, 3, 0),
    issuedAmount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    feePercent: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.AssetProperty}
 */
proto.protocol.AssetProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.AssetProperty;
  return proto.protocol.AssetProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.AssetProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.AssetProperty}
 */
proto.protocol.AssetProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimal(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxSupply(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIssuedAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFeePercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.AssetProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.AssetProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.AssetProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.AssetProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecimal();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMaxSupply();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getIssuedAmount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getFeePercent();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 decimal = 1;
 * @return {number}
 */
proto.protocol.AssetProperty.prototype.getDecimal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.AssetProperty.prototype.setDecimal = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.protocol.AssetProperty.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.AssetProperty.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 max_supply = 3;
 * @return {number}
 */
proto.protocol.AssetProperty.prototype.getMaxSupply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.AssetProperty.prototype.setMaxSupply = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 issued_amount = 4;
 * @return {number}
 */
proto.protocol.AssetProperty.prototype.getIssuedAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.AssetProperty.prototype.setIssuedAmount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 fee_percent = 5;
 * @return {number}
 */
proto.protocol.AssetProperty.prototype.getFeePercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.AssetProperty.prototype.setFeePercent = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.AssetStore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.AssetStore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.AssetStore.displayName = 'proto.protocol.AssetStore';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.AssetStore.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.AssetStore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.AssetStore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.AssetStore.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.protocol.AssetKey.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    property: (f = msg.getProperty()) && proto.protocol.AssetProperty.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.AssetStore}
 */
proto.protocol.AssetStore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.AssetStore;
  return proto.protocol.AssetStore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.AssetStore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.AssetStore}
 */
proto.protocol.AssetStore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.AssetKey;
      reader.readMessage(value,proto.protocol.AssetKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 3:
      var value = new proto.protocol.AssetProperty;
      reader.readMessage(value,proto.protocol.AssetProperty.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.AssetStore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.AssetStore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.AssetStore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.AssetStore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.AssetKey.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.AssetProperty.serializeBinaryToWriter
    );
  }
};


/**
 * optional AssetKey key = 1;
 * @return {?proto.protocol.AssetKey}
 */
proto.protocol.AssetStore.prototype.getKey = function() {
  return /** @type{?proto.protocol.AssetKey} */ (
    jspb.Message.getWrapperField(this, proto.protocol.AssetKey, 1));
};


/** @param {?proto.protocol.AssetKey|undefined} value */
proto.protocol.AssetStore.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protocol.AssetStore.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.AssetStore.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.protocol.AssetStore.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.AssetStore.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional AssetProperty property = 3;
 * @return {?proto.protocol.AssetProperty}
 */
proto.protocol.AssetStore.prototype.getProperty = function() {
  return /** @type{?proto.protocol.AssetProperty} */ (
    jspb.Message.getWrapperField(this, proto.protocol.AssetProperty, 3));
};


/** @param {?proto.protocol.AssetProperty|undefined} value */
proto.protocol.AssetStore.prototype.setProperty = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.protocol.AssetStore.prototype.clearProperty = function() {
  this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.AssetStore.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.LedgerHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.LedgerHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.LedgerHeader.displayName = 'proto.protocol.LedgerHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.LedgerHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.LedgerHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.LedgerHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.LedgerHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    seq: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hash: msg.getHash_asB64(),
    previousHash: msg.getPreviousHash_asB64(),
    accountTreeHash: msg.getAccountTreeHash_asB64(),
    closeTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    consensusValueHash: msg.getConsensusValueHash_asB64(),
    version: jspb.Message.getFieldWithDefault(msg, 7, 0),
    txCount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    validatorsHash: msg.getValidatorsHash_asB64(),
    feesHash: msg.getFeesHash_asB64(),
    reserve: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.LedgerHeader}
 */
proto.protocol.LedgerHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.LedgerHeader;
  return proto.protocol.LedgerHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.LedgerHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.LedgerHeader}
 */
proto.protocol.LedgerHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeq(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousHash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountTreeHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCloseTime(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConsensusValueHash(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTxCount(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorsHash(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeesHash(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setReserve(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.LedgerHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.LedgerHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.LedgerHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeq();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPreviousHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAccountTreeHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getCloseTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getConsensusValueHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTxCount();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getFeesHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getReserve();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional int64 seq = 1;
 * @return {number}
 */
proto.protocol.LedgerHeader.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.LedgerHeader.prototype.setSeq = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.LedgerHeader.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.LedgerHeader.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes previous_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.LedgerHeader.prototype.getPreviousHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes previous_hash = 3;
 * This is a type-conversion wrapper around `getPreviousHash()`
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getPreviousHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousHash()));
};


/**
 * optional bytes previous_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousHash()`
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.getPreviousHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.LedgerHeader.prototype.setPreviousHash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes account_tree_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.LedgerHeader.prototype.getAccountTreeHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes account_tree_hash = 4;
 * This is a type-conversion wrapper around `getAccountTreeHash()`
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getAccountTreeHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountTreeHash()));
};


/**
 * optional bytes account_tree_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountTreeHash()`
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.getAccountTreeHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountTreeHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.LedgerHeader.prototype.setAccountTreeHash = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 close_time = 5;
 * @return {number}
 */
proto.protocol.LedgerHeader.prototype.getCloseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.LedgerHeader.prototype.setCloseTime = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes consensus_value_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.LedgerHeader.prototype.getConsensusValueHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes consensus_value_hash = 6;
 * This is a type-conversion wrapper around `getConsensusValueHash()`
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getConsensusValueHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConsensusValueHash()));
};


/**
 * optional bytes consensus_value_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusValueHash()`
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.getConsensusValueHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConsensusValueHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.LedgerHeader.prototype.setConsensusValueHash = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional int64 version = 7;
 * @return {number}
 */
proto.protocol.LedgerHeader.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.LedgerHeader.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 tx_count = 8;
 * @return {number}
 */
proto.protocol.LedgerHeader.prototype.getTxCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protocol.LedgerHeader.prototype.setTxCount = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes validators_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.LedgerHeader.prototype.getValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes validators_hash = 9;
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorsHash()));
};


/**
 * optional bytes validators_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.getValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorsHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.LedgerHeader.prototype.setValidatorsHash = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes fees_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.LedgerHeader.prototype.getFeesHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes fees_hash = 10;
 * This is a type-conversion wrapper around `getFeesHash()`
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getFeesHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeesHash()));
};


/**
 * optional bytes fees_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeesHash()`
 * @return {!Uint8Array}
 */
proto.protocol.LedgerHeader.prototype.getFeesHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeesHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.LedgerHeader.prototype.setFeesHash = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional string reserve = 11;
 * @return {string}
 */
proto.protocol.LedgerHeader.prototype.getReserve = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.protocol.LedgerHeader.prototype.setReserve = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Ledger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.Ledger.repeatedFields_, null);
};
goog.inherits(proto.protocol.Ledger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Ledger.displayName = 'proto.protocol.Ledger';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.Ledger.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Ledger.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Ledger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Ledger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Ledger.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.protocol.LedgerHeader.toObject(includeInstance, f),
    transactionEnvsList: jspb.Message.toObjectList(msg.getTransactionEnvsList(),
    proto.protocol.TransactionEnv.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Ledger}
 */
proto.protocol.Ledger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Ledger;
  return proto.protocol.Ledger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Ledger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Ledger}
 */
proto.protocol.Ledger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.LedgerHeader;
      reader.readMessage(value,proto.protocol.LedgerHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.protocol.TransactionEnv;
      reader.readMessage(value,proto.protocol.TransactionEnv.deserializeBinaryFromReader);
      msg.addTransactionEnvs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Ledger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Ledger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Ledger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Ledger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.LedgerHeader.serializeBinaryToWriter
    );
  }
  f = message.getTransactionEnvsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.TransactionEnv.serializeBinaryToWriter
    );
  }
};


/**
 * optional LedgerHeader header = 1;
 * @return {?proto.protocol.LedgerHeader}
 */
proto.protocol.Ledger.prototype.getHeader = function() {
  return /** @type{?proto.protocol.LedgerHeader} */ (
    jspb.Message.getWrapperField(this, proto.protocol.LedgerHeader, 1));
};


/** @param {?proto.protocol.LedgerHeader|undefined} value */
proto.protocol.Ledger.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protocol.Ledger.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Ledger.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TransactionEnv transaction_envs = 2;
 * @return {!Array.<!proto.protocol.TransactionEnv>}
 */
proto.protocol.Ledger.prototype.getTransactionEnvsList = function() {
  return /** @type{!Array.<!proto.protocol.TransactionEnv>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.TransactionEnv, 2));
};


/** @param {!Array.<!proto.protocol.TransactionEnv>} value */
proto.protocol.Ledger.prototype.setTransactionEnvsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.TransactionEnv=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.TransactionEnv}
 */
proto.protocol.Ledger.prototype.addTransactionEnvs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.TransactionEnv, opt_index);
};


proto.protocol.Ledger.prototype.clearTransactionEnvsList = function() {
  this.setTransactionEnvsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationPayAsset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.OperationPayAsset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationPayAsset.displayName = 'proto.protocol.OperationPayAsset';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.OperationPayAsset.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.OperationPayAsset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.OperationPayAsset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationPayAsset.toObject = function(includeInstance, msg) {
  var f, obj = {
    destAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    asset: (f = msg.getAsset()) && proto.protocol.Asset.toObject(includeInstance, f),
    input: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationPayAsset}
 */
proto.protocol.OperationPayAsset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationPayAsset;
  return proto.protocol.OperationPayAsset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationPayAsset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationPayAsset}
 */
proto.protocol.OperationPayAsset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestAddress(value);
      break;
    case 2:
      var value = new proto.protocol.Asset;
      reader.readMessage(value,proto.protocol.Asset.deserializeBinaryFromReader);
      msg.setAsset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationPayAsset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.OperationPayAsset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationPayAsset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationPayAsset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDestAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsset();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.Asset.serializeBinaryToWriter
    );
  }
  f = message.getInput();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string dest_address = 1;
 * @return {string}
 */
proto.protocol.OperationPayAsset.prototype.getDestAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.OperationPayAsset.prototype.setDestAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Asset asset = 2;
 * @return {?proto.protocol.Asset}
 */
proto.protocol.OperationPayAsset.prototype.getAsset = function() {
  return /** @type{?proto.protocol.Asset} */ (
    jspb.Message.getWrapperField(this, proto.protocol.Asset, 2));
};


/** @param {?proto.protocol.Asset|undefined} value */
proto.protocol.OperationPayAsset.prototype.setAsset = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.protocol.OperationPayAsset.prototype.clearAsset = function() {
  this.setAsset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.OperationPayAsset.prototype.hasAsset = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string input = 3;
 * @return {string}
 */
proto.protocol.OperationPayAsset.prototype.getInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.OperationPayAsset.prototype.setInput = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationTypeThreshold = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.OperationTypeThreshold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationTypeThreshold.displayName = 'proto.protocol.OperationTypeThreshold';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.OperationTypeThreshold.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.OperationTypeThreshold.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.OperationTypeThreshold} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationTypeThreshold.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    threshold: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationTypeThreshold}
 */
proto.protocol.OperationTypeThreshold.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationTypeThreshold;
  return proto.protocol.OperationTypeThreshold.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationTypeThreshold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationTypeThreshold}
 */
proto.protocol.OperationTypeThreshold.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protocol.Operation.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationTypeThreshold.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.OperationTypeThreshold.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationTypeThreshold} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationTypeThreshold.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getThreshold();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional Operation.Type type = 1;
 * @return {!proto.protocol.Operation.Type}
 */
proto.protocol.OperationTypeThreshold.prototype.getType = function() {
  return /** @type {!proto.protocol.Operation.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.protocol.Operation.Type} value */
proto.protocol.OperationTypeThreshold.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 threshold = 2;
 * @return {number}
 */
proto.protocol.OperationTypeThreshold.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.OperationTypeThreshold.prototype.setThreshold = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.AccountPrivilege = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.AccountPrivilege.repeatedFields_, null);
};
goog.inherits(proto.protocol.AccountPrivilege, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.AccountPrivilege.displayName = 'proto.protocol.AccountPrivilege';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.AccountPrivilege.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.AccountPrivilege.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.AccountPrivilege.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.AccountPrivilege} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.AccountPrivilege.toObject = function(includeInstance, msg) {
  var f, obj = {
    masterWeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signersList: jspb.Message.toObjectList(msg.getSignersList(),
    proto.protocol.Signer.toObject, includeInstance),
    thresholds: (f = msg.getThresholds()) && proto.protocol.AccountThreshold.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.AccountPrivilege}
 */
proto.protocol.AccountPrivilege.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.AccountPrivilege;
  return proto.protocol.AccountPrivilege.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.AccountPrivilege} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.AccountPrivilege}
 */
proto.protocol.AccountPrivilege.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMasterWeight(value);
      break;
    case 2:
      var value = new proto.protocol.Signer;
      reader.readMessage(value,proto.protocol.Signer.deserializeBinaryFromReader);
      msg.addSigners(value);
      break;
    case 3:
      var value = new proto.protocol.AccountThreshold;
      reader.readMessage(value,proto.protocol.AccountThreshold.deserializeBinaryFromReader);
      msg.setThresholds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.AccountPrivilege.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.AccountPrivilege.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.AccountPrivilege} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.AccountPrivilege.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMasterWeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.Signer.serializeBinaryToWriter
    );
  }
  f = message.getThresholds();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.AccountThreshold.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 master_weight = 1;
 * @return {number}
 */
proto.protocol.AccountPrivilege.prototype.getMasterWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.AccountPrivilege.prototype.setMasterWeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Signer signers = 2;
 * @return {!Array.<!proto.protocol.Signer>}
 */
proto.protocol.AccountPrivilege.prototype.getSignersList = function() {
  return /** @type{!Array.<!proto.protocol.Signer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.Signer, 2));
};


/** @param {!Array.<!proto.protocol.Signer>} value */
proto.protocol.AccountPrivilege.prototype.setSignersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.Signer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.Signer}
 */
proto.protocol.AccountPrivilege.prototype.addSigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.Signer, opt_index);
};


proto.protocol.AccountPrivilege.prototype.clearSignersList = function() {
  this.setSignersList([]);
};


/**
 * optional AccountThreshold thresholds = 3;
 * @return {?proto.protocol.AccountThreshold}
 */
proto.protocol.AccountPrivilege.prototype.getThresholds = function() {
  return /** @type{?proto.protocol.AccountThreshold} */ (
    jspb.Message.getWrapperField(this, proto.protocol.AccountThreshold, 3));
};


/** @param {?proto.protocol.AccountThreshold|undefined} value */
proto.protocol.AccountPrivilege.prototype.setThresholds = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.protocol.AccountPrivilege.prototype.clearThresholds = function() {
  this.setThresholds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.AccountPrivilege.prototype.hasThresholds = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.AccountThreshold = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.AccountThreshold.repeatedFields_, null);
};
goog.inherits(proto.protocol.AccountThreshold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.AccountThreshold.displayName = 'proto.protocol.AccountThreshold';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.AccountThreshold.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.AccountThreshold.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.AccountThreshold.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.AccountThreshold} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.AccountThreshold.toObject = function(includeInstance, msg) {
  var f, obj = {
    txThreshold: jspb.Message.getFieldWithDefault(msg, 1, 0),
    typeThresholdsList: jspb.Message.toObjectList(msg.getTypeThresholdsList(),
    proto.protocol.OperationTypeThreshold.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.AccountThreshold}
 */
proto.protocol.AccountThreshold.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.AccountThreshold;
  return proto.protocol.AccountThreshold.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.AccountThreshold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.AccountThreshold}
 */
proto.protocol.AccountThreshold.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTxThreshold(value);
      break;
    case 2:
      var value = new proto.protocol.OperationTypeThreshold;
      reader.readMessage(value,proto.protocol.OperationTypeThreshold.deserializeBinaryFromReader);
      msg.addTypeThresholds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.AccountThreshold.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.AccountThreshold.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.AccountThreshold} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.AccountThreshold.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxThreshold();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTypeThresholdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.OperationTypeThreshold.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 tx_threshold = 1;
 * @return {number}
 */
proto.protocol.AccountThreshold.prototype.getTxThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.AccountThreshold.prototype.setTxThreshold = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated OperationTypeThreshold type_thresholds = 2;
 * @return {!Array.<!proto.protocol.OperationTypeThreshold>}
 */
proto.protocol.AccountThreshold.prototype.getTypeThresholdsList = function() {
  return /** @type{!Array.<!proto.protocol.OperationTypeThreshold>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.OperationTypeThreshold, 2));
};


/** @param {!Array.<!proto.protocol.OperationTypeThreshold>} value */
proto.protocol.AccountThreshold.prototype.setTypeThresholdsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.OperationTypeThreshold=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.OperationTypeThreshold}
 */
proto.protocol.AccountThreshold.prototype.addTypeThresholds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.OperationTypeThreshold, opt_index);
};


proto.protocol.AccountThreshold.prototype.clearTypeThresholdsList = function() {
  this.setTypeThresholdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationIssueAsset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.OperationIssueAsset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationIssueAsset.displayName = 'proto.protocol.OperationIssueAsset';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.OperationIssueAsset.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.OperationIssueAsset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.OperationIssueAsset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationIssueAsset.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationIssueAsset}
 */
proto.protocol.OperationIssueAsset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationIssueAsset;
  return proto.protocol.OperationIssueAsset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationIssueAsset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationIssueAsset}
 */
proto.protocol.OperationIssueAsset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationIssueAsset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.OperationIssueAsset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationIssueAsset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationIssueAsset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.protocol.OperationIssueAsset.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.OperationIssueAsset.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.protocol.OperationIssueAsset.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.OperationIssueAsset.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationPayCoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.OperationPayCoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationPayCoin.displayName = 'proto.protocol.OperationPayCoin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.OperationPayCoin.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.OperationPayCoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.OperationPayCoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationPayCoin.toObject = function(includeInstance, msg) {
  var f, obj = {
    destAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    input: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationPayCoin}
 */
proto.protocol.OperationPayCoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationPayCoin;
  return proto.protocol.OperationPayCoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationPayCoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationPayCoin}
 */
proto.protocol.OperationPayCoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationPayCoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.OperationPayCoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationPayCoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationPayCoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDestAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getInput();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string dest_address = 1;
 * @return {string}
 */
proto.protocol.OperationPayCoin.prototype.getDestAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.OperationPayCoin.prototype.setDestAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.protocol.OperationPayCoin.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.OperationPayCoin.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string input = 3;
 * @return {string}
 */
proto.protocol.OperationPayCoin.prototype.getInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.OperationPayCoin.prototype.setInput = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationSetSignerWeight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.OperationSetSignerWeight.repeatedFields_, null);
};
goog.inherits(proto.protocol.OperationSetSignerWeight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationSetSignerWeight.displayName = 'proto.protocol.OperationSetSignerWeight';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.OperationSetSignerWeight.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.OperationSetSignerWeight.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.OperationSetSignerWeight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.OperationSetSignerWeight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationSetSignerWeight.toObject = function(includeInstance, msg) {
  var f, obj = {
    masterWeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signersList: jspb.Message.toObjectList(msg.getSignersList(),
    proto.protocol.Signer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationSetSignerWeight}
 */
proto.protocol.OperationSetSignerWeight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationSetSignerWeight;
  return proto.protocol.OperationSetSignerWeight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationSetSignerWeight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationSetSignerWeight}
 */
proto.protocol.OperationSetSignerWeight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMasterWeight(value);
      break;
    case 2:
      var value = new proto.protocol.Signer;
      reader.readMessage(value,proto.protocol.Signer.deserializeBinaryFromReader);
      msg.addSigners(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationSetSignerWeight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.OperationSetSignerWeight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationSetSignerWeight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationSetSignerWeight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMasterWeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.Signer.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 master_weight = 1;
 * @return {number}
 */
proto.protocol.OperationSetSignerWeight.prototype.getMasterWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.OperationSetSignerWeight.prototype.setMasterWeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Signer signers = 2;
 * @return {!Array.<!proto.protocol.Signer>}
 */
proto.protocol.OperationSetSignerWeight.prototype.getSignersList = function() {
  return /** @type{!Array.<!proto.protocol.Signer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.Signer, 2));
};


/** @param {!Array.<!proto.protocol.Signer>} value */
proto.protocol.OperationSetSignerWeight.prototype.setSignersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.Signer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.Signer}
 */
proto.protocol.OperationSetSignerWeight.prototype.addSigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.Signer, opt_index);
};


proto.protocol.OperationSetSignerWeight.prototype.clearSignersList = function() {
  this.setSignersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.OperationLog.repeatedFields_, null);
};
goog.inherits(proto.protocol.OperationLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationLog.displayName = 'proto.protocol.OperationLog';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.OperationLog.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.OperationLog.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.OperationLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.OperationLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: jspb.Message.getFieldWithDefault(msg, 1, ""),
    datasList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationLog}
 */
proto.protocol.OperationLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationLog;
  return proto.protocol.OperationLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationLog}
 */
proto.protocol.OperationLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDatas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.OperationLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDatasList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.protocol.OperationLog.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.OperationLog.prototype.setTopic = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string datas = 2;
 * @return {!Array.<string>}
 */
proto.protocol.OperationLog.prototype.getDatasList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.protocol.OperationLog.prototype.setDatasList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protocol.OperationLog.prototype.addDatas = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.protocol.OperationLog.prototype.clearDatasList = function() {
  this.setDatasList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationSetPrivilege = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.OperationSetPrivilege.repeatedFields_, null);
};
goog.inherits(proto.protocol.OperationSetPrivilege, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationSetPrivilege.displayName = 'proto.protocol.OperationSetPrivilege';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.OperationSetPrivilege.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.OperationSetPrivilege.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.OperationSetPrivilege.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.OperationSetPrivilege} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationSetPrivilege.toObject = function(includeInstance, msg) {
  var f, obj = {
    masterWeight: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signersList: jspb.Message.toObjectList(msg.getSignersList(),
    proto.protocol.Signer.toObject, includeInstance),
    txThreshold: jspb.Message.getFieldWithDefault(msg, 3, ""),
    typeThresholdsList: jspb.Message.toObjectList(msg.getTypeThresholdsList(),
    proto.protocol.OperationTypeThreshold.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationSetPrivilege}
 */
proto.protocol.OperationSetPrivilege.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationSetPrivilege;
  return proto.protocol.OperationSetPrivilege.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationSetPrivilege} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationSetPrivilege}
 */
proto.protocol.OperationSetPrivilege.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMasterWeight(value);
      break;
    case 2:
      var value = new proto.protocol.Signer;
      reader.readMessage(value,proto.protocol.Signer.deserializeBinaryFromReader);
      msg.addSigners(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxThreshold(value);
      break;
    case 4:
      var value = new proto.protocol.OperationTypeThreshold;
      reader.readMessage(value,proto.protocol.OperationTypeThreshold.deserializeBinaryFromReader);
      msg.addTypeThresholds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationSetPrivilege.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.OperationSetPrivilege.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationSetPrivilege} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationSetPrivilege.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMasterWeight();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.Signer.serializeBinaryToWriter
    );
  }
  f = message.getTxThreshold();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTypeThresholdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.protocol.OperationTypeThreshold.serializeBinaryToWriter
    );
  }
};


/**
 * optional string master_weight = 1;
 * @return {string}
 */
proto.protocol.OperationSetPrivilege.prototype.getMasterWeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.OperationSetPrivilege.prototype.setMasterWeight = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Signer signers = 2;
 * @return {!Array.<!proto.protocol.Signer>}
 */
proto.protocol.OperationSetPrivilege.prototype.getSignersList = function() {
  return /** @type{!Array.<!proto.protocol.Signer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.Signer, 2));
};


/** @param {!Array.<!proto.protocol.Signer>} value */
proto.protocol.OperationSetPrivilege.prototype.setSignersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.Signer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.Signer}
 */
proto.protocol.OperationSetPrivilege.prototype.addSigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.Signer, opt_index);
};


proto.protocol.OperationSetPrivilege.prototype.clearSignersList = function() {
  this.setSignersList([]);
};


/**
 * optional string tx_threshold = 3;
 * @return {string}
 */
proto.protocol.OperationSetPrivilege.prototype.getTxThreshold = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.OperationSetPrivilege.prototype.setTxThreshold = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated OperationTypeThreshold type_thresholds = 4;
 * @return {!Array.<!proto.protocol.OperationTypeThreshold>}
 */
proto.protocol.OperationSetPrivilege.prototype.getTypeThresholdsList = function() {
  return /** @type{!Array.<!proto.protocol.OperationTypeThreshold>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.OperationTypeThreshold, 4));
};


/** @param {!Array.<!proto.protocol.OperationTypeThreshold>} value */
proto.protocol.OperationSetPrivilege.prototype.setTypeThresholdsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.protocol.OperationTypeThreshold=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.OperationTypeThreshold}
 */
proto.protocol.OperationSetPrivilege.prototype.addTypeThresholds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protocol.OperationTypeThreshold, opt_index);
};


proto.protocol.OperationSetPrivilege.prototype.clearTypeThresholdsList = function() {
  this.setTypeThresholdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Operation.displayName = 'proto.protocol.Operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sourceAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    metadata: msg.getMetadata_asB64(),
    createAccount: (f = msg.getCreateAccount()) && proto.protocol.OperationCreateAccount.toObject(includeInstance, f),
    issueAsset: (f = msg.getIssueAsset()) && proto.protocol.OperationIssueAsset.toObject(includeInstance, f),
    payAsset: (f = msg.getPayAsset()) && proto.protocol.OperationPayAsset.toObject(includeInstance, f),
    setMetadata: (f = msg.getSetMetadata()) && proto.protocol.OperationSetMetadata.toObject(includeInstance, f),
    setSignerWeight: (f = msg.getSetSignerWeight()) && proto.protocol.OperationSetSignerWeight.toObject(includeInstance, f),
    setThreshold: (f = msg.getSetThreshold()) && proto.protocol.OperationSetThreshold.toObject(includeInstance, f),
    payCoin: (f = msg.getPayCoin()) && proto.protocol.OperationPayCoin.toObject(includeInstance, f),
    log: (f = msg.getLog()) && proto.protocol.OperationLog.toObject(includeInstance, f),
    setPrivilege: (f = msg.getSetPrivilege()) && proto.protocol.OperationSetPrivilege.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Operation}
 */
proto.protocol.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Operation;
  return proto.protocol.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Operation}
 */
proto.protocol.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protocol.Operation.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceAddress(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    case 4:
      var value = new proto.protocol.OperationCreateAccount;
      reader.readMessage(value,proto.protocol.OperationCreateAccount.deserializeBinaryFromReader);
      msg.setCreateAccount(value);
      break;
    case 5:
      var value = new proto.protocol.OperationIssueAsset;
      reader.readMessage(value,proto.protocol.OperationIssueAsset.deserializeBinaryFromReader);
      msg.setIssueAsset(value);
      break;
    case 6:
      var value = new proto.protocol.OperationPayAsset;
      reader.readMessage(value,proto.protocol.OperationPayAsset.deserializeBinaryFromReader);
      msg.setPayAsset(value);
      break;
    case 7:
      var value = new proto.protocol.OperationSetMetadata;
      reader.readMessage(value,proto.protocol.OperationSetMetadata.deserializeBinaryFromReader);
      msg.setSetMetadata(value);
      break;
    case 8:
      var value = new proto.protocol.OperationSetSignerWeight;
      reader.readMessage(value,proto.protocol.OperationSetSignerWeight.deserializeBinaryFromReader);
      msg.setSetSignerWeight(value);
      break;
    case 9:
      var value = new proto.protocol.OperationSetThreshold;
      reader.readMessage(value,proto.protocol.OperationSetThreshold.deserializeBinaryFromReader);
      msg.setSetThreshold(value);
      break;
    case 10:
      var value = new proto.protocol.OperationPayCoin;
      reader.readMessage(value,proto.protocol.OperationPayCoin.deserializeBinaryFromReader);
      msg.setPayCoin(value);
      break;
    case 11:
      var value = new proto.protocol.OperationLog;
      reader.readMessage(value,proto.protocol.OperationLog.deserializeBinaryFromReader);
      msg.setLog(value);
      break;
    case 12:
      var value = new proto.protocol.OperationSetPrivilege;
      reader.readMessage(value,proto.protocol.OperationSetPrivilege.deserializeBinaryFromReader);
      msg.setSetPrivilege(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSourceAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getCreateAccount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protocol.OperationCreateAccount.serializeBinaryToWriter
    );
  }
  f = message.getIssueAsset();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.protocol.OperationIssueAsset.serializeBinaryToWriter
    );
  }
  f = message.getPayAsset();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.protocol.OperationPayAsset.serializeBinaryToWriter
    );
  }
  f = message.getSetMetadata();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.protocol.OperationSetMetadata.serializeBinaryToWriter
    );
  }
  f = message.getSetSignerWeight();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.protocol.OperationSetSignerWeight.serializeBinaryToWriter
    );
  }
  f = message.getSetThreshold();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.protocol.OperationSetThreshold.serializeBinaryToWriter
    );
  }
  f = message.getPayCoin();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.protocol.OperationPayCoin.serializeBinaryToWriter
    );
  }
  f = message.getLog();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.protocol.OperationLog.serializeBinaryToWriter
    );
  }
  f = message.getSetPrivilege();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.protocol.OperationSetPrivilege.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.protocol.Operation.Type = {
  UNKNOWN: 0,
  CREATE_ACCOUNT: 1,
  ISSUE_ASSET: 2,
  PAY_ASSET: 3,
  SET_METADATA: 4,
  SET_SIGNER_WEIGHT: 5,
  SET_THRESHOLD: 6,
  PAY_COIN: 7,
  LOG: 8,
  SET_PRIVILEGE: 9
};

/**
 * optional Type type = 1;
 * @return {!proto.protocol.Operation.Type}
 */
proto.protocol.Operation.prototype.getType = function() {
  return /** @type {!proto.protocol.Operation.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.protocol.Operation.Type} value */
proto.protocol.Operation.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string source_address = 2;
 * @return {string}
 */
proto.protocol.Operation.prototype.getSourceAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.Operation.prototype.setSourceAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes metadata = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.Operation.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes metadata = 3;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.protocol.Operation.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.protocol.Operation.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.Operation.prototype.setMetadata = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional OperationCreateAccount create_account = 4;
 * @return {?proto.protocol.OperationCreateAccount}
 */
proto.protocol.Operation.prototype.getCreateAccount = function() {
  return /** @type{?proto.protocol.OperationCreateAccount} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationCreateAccount, 4));
};


/** @param {?proto.protocol.OperationCreateAccount|undefined} value */
proto.protocol.Operation.prototype.setCreateAccount = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.protocol.Operation.prototype.clearCreateAccount = function() {
  this.setCreateAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Operation.prototype.hasCreateAccount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OperationIssueAsset issue_asset = 5;
 * @return {?proto.protocol.OperationIssueAsset}
 */
proto.protocol.Operation.prototype.getIssueAsset = function() {
  return /** @type{?proto.protocol.OperationIssueAsset} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationIssueAsset, 5));
};


/** @param {?proto.protocol.OperationIssueAsset|undefined} value */
proto.protocol.Operation.prototype.setIssueAsset = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.protocol.Operation.prototype.clearIssueAsset = function() {
  this.setIssueAsset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Operation.prototype.hasIssueAsset = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OperationPayAsset pay_asset = 6;
 * @return {?proto.protocol.OperationPayAsset}
 */
proto.protocol.Operation.prototype.getPayAsset = function() {
  return /** @type{?proto.protocol.OperationPayAsset} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationPayAsset, 6));
};


/** @param {?proto.protocol.OperationPayAsset|undefined} value */
proto.protocol.Operation.prototype.setPayAsset = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.protocol.Operation.prototype.clearPayAsset = function() {
  this.setPayAsset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Operation.prototype.hasPayAsset = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OperationSetMetadata set_metadata = 7;
 * @return {?proto.protocol.OperationSetMetadata}
 */
proto.protocol.Operation.prototype.getSetMetadata = function() {
  return /** @type{?proto.protocol.OperationSetMetadata} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationSetMetadata, 7));
};


/** @param {?proto.protocol.OperationSetMetadata|undefined} value */
proto.protocol.Operation.prototype.setSetMetadata = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.protocol.Operation.prototype.clearSetMetadata = function() {
  this.setSetMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Operation.prototype.hasSetMetadata = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional OperationSetSignerWeight set_signer_weight = 8;
 * @return {?proto.protocol.OperationSetSignerWeight}
 */
proto.protocol.Operation.prototype.getSetSignerWeight = function() {
  return /** @type{?proto.protocol.OperationSetSignerWeight} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationSetSignerWeight, 8));
};


/** @param {?proto.protocol.OperationSetSignerWeight|undefined} value */
proto.protocol.Operation.prototype.setSetSignerWeight = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.protocol.Operation.prototype.clearSetSignerWeight = function() {
  this.setSetSignerWeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Operation.prototype.hasSetSignerWeight = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional OperationSetThreshold set_threshold = 9;
 * @return {?proto.protocol.OperationSetThreshold}
 */
proto.protocol.Operation.prototype.getSetThreshold = function() {
  return /** @type{?proto.protocol.OperationSetThreshold} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationSetThreshold, 9));
};


/** @param {?proto.protocol.OperationSetThreshold|undefined} value */
proto.protocol.Operation.prototype.setSetThreshold = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.protocol.Operation.prototype.clearSetThreshold = function() {
  this.setSetThreshold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Operation.prototype.hasSetThreshold = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional OperationPayCoin pay_coin = 10;
 * @return {?proto.protocol.OperationPayCoin}
 */
proto.protocol.Operation.prototype.getPayCoin = function() {
  return /** @type{?proto.protocol.OperationPayCoin} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationPayCoin, 10));
};


/** @param {?proto.protocol.OperationPayCoin|undefined} value */
proto.protocol.Operation.prototype.setPayCoin = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.protocol.Operation.prototype.clearPayCoin = function() {
  this.setPayCoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Operation.prototype.hasPayCoin = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional OperationLog log = 11;
 * @return {?proto.protocol.OperationLog}
 */
proto.protocol.Operation.prototype.getLog = function() {
  return /** @type{?proto.protocol.OperationLog} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationLog, 11));
};


/** @param {?proto.protocol.OperationLog|undefined} value */
proto.protocol.Operation.prototype.setLog = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.protocol.Operation.prototype.clearLog = function() {
  this.setLog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Operation.prototype.hasLog = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional OperationSetPrivilege set_privilege = 12;
 * @return {?proto.protocol.OperationSetPrivilege}
 */
proto.protocol.Operation.prototype.getSetPrivilege = function() {
  return /** @type{?proto.protocol.OperationSetPrivilege} */ (
    jspb.Message.getWrapperField(this, proto.protocol.OperationSetPrivilege, 12));
};


/** @param {?proto.protocol.OperationSetPrivilege|undefined} value */
proto.protocol.Operation.prototype.setSetPrivilege = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.protocol.Operation.prototype.clearSetPrivilege = function() {
  this.setSetPrivilege(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Operation.prototype.hasSetPrivilege = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationSetThreshold = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.OperationSetThreshold.repeatedFields_, null);
};
goog.inherits(proto.protocol.OperationSetThreshold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationSetThreshold.displayName = 'proto.protocol.OperationSetThreshold';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.OperationSetThreshold.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.OperationSetThreshold.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.OperationSetThreshold.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.OperationSetThreshold} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationSetThreshold.toObject = function(includeInstance, msg) {
  var f, obj = {
    txThreshold: jspb.Message.getFieldWithDefault(msg, 1, 0),
    typeThresholdsList: jspb.Message.toObjectList(msg.getTypeThresholdsList(),
    proto.protocol.OperationTypeThreshold.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationSetThreshold}
 */
proto.protocol.OperationSetThreshold.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationSetThreshold;
  return proto.protocol.OperationSetThreshold.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationSetThreshold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationSetThreshold}
 */
proto.protocol.OperationSetThreshold.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTxThreshold(value);
      break;
    case 2:
      var value = new proto.protocol.OperationTypeThreshold;
      reader.readMessage(value,proto.protocol.OperationTypeThreshold.deserializeBinaryFromReader);
      msg.addTypeThresholds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationSetThreshold.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.OperationSetThreshold.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationSetThreshold} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationSetThreshold.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxThreshold();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTypeThresholdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.OperationTypeThreshold.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 tx_threshold = 1;
 * @return {number}
 */
proto.protocol.OperationSetThreshold.prototype.getTxThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.OperationSetThreshold.prototype.setTxThreshold = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated OperationTypeThreshold type_thresholds = 2;
 * @return {!Array.<!proto.protocol.OperationTypeThreshold>}
 */
proto.protocol.OperationSetThreshold.prototype.getTypeThresholdsList = function() {
  return /** @type{!Array.<!proto.protocol.OperationTypeThreshold>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.OperationTypeThreshold, 2));
};


/** @param {!Array.<!proto.protocol.OperationTypeThreshold>} value */
proto.protocol.OperationSetThreshold.prototype.setTypeThresholdsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.OperationTypeThreshold=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.OperationTypeThreshold}
 */
proto.protocol.OperationSetThreshold.prototype.addTypeThresholds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.OperationTypeThreshold, opt_index);
};


proto.protocol.OperationSetThreshold.prototype.clearTypeThresholdsList = function() {
  this.setTypeThresholdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.Transaction.repeatedFields_, null);
};
goog.inherits(proto.protocol.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Transaction.displayName = 'proto.protocol.Transaction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.Transaction.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    feeLimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gasPrice: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ceilLedgerSeq: jspb.Message.getFieldWithDefault(msg, 5, 0),
    metadata: msg.getMetadata_asB64(),
    operationsList: jspb.Message.toObjectList(msg.getOperationsList(),
    proto.protocol.Operation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Transaction}
 */
proto.protocol.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Transaction;
  return proto.protocol.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Transaction}
 */
proto.protocol.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFeeLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGasPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCeilLedgerSeq(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    case 7:
      var value = new proto.protocol.Operation;
      reader.readMessage(value,proto.protocol.Operation.deserializeBinaryFromReader);
      msg.addOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFeeLimit();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getGasPrice();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCeilLedgerSeq();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.protocol.Operation.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.protocol.Transaction.Limit = {
  UNKNOWN: 0,
  OPERATIONS: 1000
};

/**
 * optional string source_address = 1;
 * @return {string}
 */
proto.protocol.Transaction.prototype.getSourceAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.Transaction.prototype.setSourceAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 nonce = 2;
 * @return {number}
 */
proto.protocol.Transaction.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.Transaction.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 fee_limit = 3;
 * @return {number}
 */
proto.protocol.Transaction.prototype.getFeeLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.Transaction.prototype.setFeeLimit = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 gas_price = 4;
 * @return {number}
 */
proto.protocol.Transaction.prototype.getGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.Transaction.prototype.setGasPrice = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 ceil_ledger_seq = 5;
 * @return {number}
 */
proto.protocol.Transaction.prototype.getCeilLedgerSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.Transaction.prototype.setCeilLedgerSeq = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes metadata = 6;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.Transaction.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes metadata = 6;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.protocol.Transaction.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.protocol.Transaction.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.Transaction.prototype.setMetadata = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * repeated Operation operations = 7;
 * @return {!Array.<!proto.protocol.Operation>}
 */
proto.protocol.Transaction.prototype.getOperationsList = function() {
  return /** @type{!Array.<!proto.protocol.Operation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.Operation, 7));
};


/** @param {!Array.<!proto.protocol.Operation>} value */
proto.protocol.Transaction.prototype.setOperationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.protocol.Operation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.Operation}
 */
proto.protocol.Transaction.prototype.addOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.protocol.Operation, opt_index);
};


proto.protocol.Transaction.prototype.clearOperationsList = function() {
  this.setOperationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Signer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Signer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Signer.displayName = 'proto.protocol.Signer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Signer.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Signer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Signer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Signer.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    weight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Signer}
 */
proto.protocol.Signer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Signer;
  return proto.protocol.Signer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Signer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Signer}
 */
proto.protocol.Signer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Signer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Signer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Signer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Signer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.protocol.Signer.Limit = {
  SIGNER_NONE: 0,
  SIGNER: 100
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.protocol.Signer.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.Signer.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 weight = 2;
 * @return {number}
 */
proto.protocol.Signer.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.Signer.prototype.setWeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Trigger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Trigger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Trigger.displayName = 'proto.protocol.Trigger';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Trigger.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Trigger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Trigger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Trigger.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ledgerSeq: jspb.Message.getFieldWithDefault(msg, 2, 0),
    transaction: (f = msg.getTransaction()) && proto.protocol.Trigger.OperationTrigger.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Trigger}
 */
proto.protocol.Trigger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Trigger;
  return proto.protocol.Trigger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Trigger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Trigger}
 */
proto.protocol.Trigger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protocol.Trigger.TransactionType} */ (reader.readEnum());
      msg.setTransactionType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLedgerSeq(value);
      break;
    case 3:
      var value = new proto.protocol.Trigger.OperationTrigger;
      reader.readMessage(value,proto.protocol.Trigger.OperationTrigger.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Trigger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Trigger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Trigger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Trigger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLedgerSeq();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.Trigger.OperationTrigger.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.protocol.Trigger.TransactionType = {
  NORMAL_TRANSACTION: 0,
  CONTRACT_TRANSACTION: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Trigger.OperationTrigger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Trigger.OperationTrigger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Trigger.OperationTrigger.displayName = 'proto.protocol.Trigger.OperationTrigger';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Trigger.OperationTrigger.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Trigger.OperationTrigger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Trigger.OperationTrigger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Trigger.OperationTrigger.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Trigger.OperationTrigger}
 */
proto.protocol.Trigger.OperationTrigger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Trigger.OperationTrigger;
  return proto.protocol.Trigger.OperationTrigger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Trigger.OperationTrigger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Trigger.OperationTrigger}
 */
proto.protocol.Trigger.OperationTrigger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Trigger.OperationTrigger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Trigger.OperationTrigger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Trigger.OperationTrigger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Trigger.OperationTrigger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.Trigger.OperationTrigger.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.protocol.Trigger.OperationTrigger.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.protocol.Trigger.OperationTrigger.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.Trigger.OperationTrigger.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 index = 2;
 * @return {number}
 */
proto.protocol.Trigger.OperationTrigger.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.Trigger.OperationTrigger.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TransactionType transaction_type = 1;
 * @return {!proto.protocol.Trigger.TransactionType}
 */
proto.protocol.Trigger.prototype.getTransactionType = function() {
  return /** @type {!proto.protocol.Trigger.TransactionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.protocol.Trigger.TransactionType} value */
proto.protocol.Trigger.prototype.setTransactionType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 ledger_seq = 2;
 * @return {number}
 */
proto.protocol.Trigger.prototype.getLedgerSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.Trigger.prototype.setLedgerSeq = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional OperationTrigger transaction = 3;
 * @return {?proto.protocol.Trigger.OperationTrigger}
 */
proto.protocol.Trigger.prototype.getTransaction = function() {
  return /** @type{?proto.protocol.Trigger.OperationTrigger} */ (
    jspb.Message.getWrapperField(this, proto.protocol.Trigger.OperationTrigger, 3));
};


/** @param {?proto.protocol.Trigger.OperationTrigger|undefined} value */
proto.protocol.Trigger.prototype.setTransaction = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.protocol.Trigger.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Trigger.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TransactionEnv = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.TransactionEnv.repeatedFields_, null);
};
goog.inherits(proto.protocol.TransactionEnv, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.TransactionEnv.displayName = 'proto.protocol.TransactionEnv';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.TransactionEnv.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.TransactionEnv.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.TransactionEnv.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.TransactionEnv} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactionEnv.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && proto.protocol.Transaction.toObject(includeInstance, f),
    signaturesList: jspb.Message.toObjectList(msg.getSignaturesList(),
    common_pb.Signature.toObject, includeInstance),
    trigger: (f = msg.getTrigger()) && proto.protocol.Trigger.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TransactionEnv}
 */
proto.protocol.TransactionEnv.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.TransactionEnv;
  return proto.protocol.TransactionEnv.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TransactionEnv} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TransactionEnv}
 */
proto.protocol.TransactionEnv.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.Transaction;
      reader.readMessage(value,proto.protocol.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 2:
      var value = new common_pb.Signature;
      reader.readMessage(value,common_pb.Signature.deserializeBinaryFromReader);
      msg.addSignatures(value);
      break;
    case 3:
      var value = new proto.protocol.Trigger;
      reader.readMessage(value,proto.protocol.Trigger.deserializeBinaryFromReader);
      msg.setTrigger(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TransactionEnv.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.TransactionEnv.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TransactionEnv} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactionEnv.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      common_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getTrigger();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.Trigger.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transaction transaction = 1;
 * @return {?proto.protocol.Transaction}
 */
proto.protocol.TransactionEnv.prototype.getTransaction = function() {
  return /** @type{?proto.protocol.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.protocol.Transaction, 1));
};


/** @param {?proto.protocol.Transaction|undefined} value */
proto.protocol.TransactionEnv.prototype.setTransaction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protocol.TransactionEnv.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.TransactionEnv.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Signature signatures = 2;
 * @return {!Array.<!proto.protocol.Signature>}
 */
proto.protocol.TransactionEnv.prototype.getSignaturesList = function() {
  return /** @type{!Array.<!proto.protocol.Signature>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Signature, 2));
};


/** @param {!Array.<!proto.protocol.Signature>} value */
proto.protocol.TransactionEnv.prototype.setSignaturesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.Signature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.Signature}
 */
proto.protocol.TransactionEnv.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.Signature, opt_index);
};


proto.protocol.TransactionEnv.prototype.clearSignaturesList = function() {
  this.setSignaturesList([]);
};


/**
 * optional Trigger trigger = 3;
 * @return {?proto.protocol.Trigger}
 */
proto.protocol.TransactionEnv.prototype.getTrigger = function() {
  return /** @type{?proto.protocol.Trigger} */ (
    jspb.Message.getWrapperField(this, proto.protocol.Trigger, 3));
};


/** @param {?proto.protocol.Trigger|undefined} value */
proto.protocol.TransactionEnv.prototype.setTrigger = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.protocol.TransactionEnv.prototype.clearTrigger = function() {
  this.setTrigger(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.TransactionEnv.prototype.hasTrigger = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TransactionEnvStore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.TransactionEnvStore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.TransactionEnvStore.displayName = 'proto.protocol.TransactionEnvStore';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.TransactionEnvStore.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.TransactionEnvStore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.TransactionEnvStore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactionEnvStore.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionEnv: (f = msg.getTransactionEnv()) && proto.protocol.TransactionEnv.toObject(includeInstance, f),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDesc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ledgerSeq: jspb.Message.getFieldWithDefault(msg, 4, 0),
    closeTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    hash: msg.getHash_asB64(),
    actualFee: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TransactionEnvStore}
 */
proto.protocol.TransactionEnvStore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.TransactionEnvStore;
  return proto.protocol.TransactionEnvStore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TransactionEnvStore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TransactionEnvStore}
 */
proto.protocol.TransactionEnvStore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.TransactionEnv;
      reader.readMessage(value,proto.protocol.TransactionEnv.deserializeBinaryFromReader);
      msg.setTransactionEnv(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDesc(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLedgerSeq(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCloseTime(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActualFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TransactionEnvStore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.TransactionEnvStore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TransactionEnvStore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactionEnvStore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionEnv();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.TransactionEnv.serializeBinaryToWriter
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLedgerSeq();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCloseTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getActualFee();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional TransactionEnv transaction_env = 1;
 * @return {?proto.protocol.TransactionEnv}
 */
proto.protocol.TransactionEnvStore.prototype.getTransactionEnv = function() {
  return /** @type{?proto.protocol.TransactionEnv} */ (
    jspb.Message.getWrapperField(this, proto.protocol.TransactionEnv, 1));
};


/** @param {?proto.protocol.TransactionEnv|undefined} value */
proto.protocol.TransactionEnvStore.prototype.setTransactionEnv = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protocol.TransactionEnvStore.prototype.clearTransactionEnv = function() {
  this.setTransactionEnv(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.TransactionEnvStore.prototype.hasTransactionEnv = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.protocol.TransactionEnvStore.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.TransactionEnvStore.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_desc = 3;
 * @return {string}
 */
proto.protocol.TransactionEnvStore.prototype.getErrorDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.TransactionEnvStore.prototype.setErrorDesc = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 ledger_seq = 4;
 * @return {number}
 */
proto.protocol.TransactionEnvStore.prototype.getLedgerSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.TransactionEnvStore.prototype.setLedgerSeq = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 close_time = 5;
 * @return {number}
 */
proto.protocol.TransactionEnvStore.prototype.getCloseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.TransactionEnvStore.prototype.setCloseTime = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.TransactionEnvStore.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes hash = 6;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.protocol.TransactionEnvStore.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.protocol.TransactionEnvStore.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.TransactionEnvStore.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional int64 actual_fee = 7;
 * @return {number}
 */
proto.protocol.TransactionEnvStore.prototype.getActualFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.TransactionEnvStore.prototype.setActualFee = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TransactionEnvSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.TransactionEnvSet.repeatedFields_, null);
};
goog.inherits(proto.protocol.TransactionEnvSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.TransactionEnvSet.displayName = 'proto.protocol.TransactionEnvSet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.TransactionEnvSet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.TransactionEnvSet.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.TransactionEnvSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.TransactionEnvSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactionEnvSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.protocol.TransactionEnv.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TransactionEnvSet}
 */
proto.protocol.TransactionEnvSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.TransactionEnvSet;
  return proto.protocol.TransactionEnvSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TransactionEnvSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TransactionEnvSet}
 */
proto.protocol.TransactionEnvSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.protocol.TransactionEnv;
      reader.readMessage(value,proto.protocol.TransactionEnv.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TransactionEnvSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.TransactionEnvSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TransactionEnvSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactionEnvSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.TransactionEnv.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TransactionEnv txs = 2;
 * @return {!Array.<!proto.protocol.TransactionEnv>}
 */
proto.protocol.TransactionEnvSet.prototype.getTxsList = function() {
  return /** @type{!Array.<!proto.protocol.TransactionEnv>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.TransactionEnv, 2));
};


/** @param {!Array.<!proto.protocol.TransactionEnv>} value */
proto.protocol.TransactionEnvSet.prototype.setTxsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.TransactionEnv=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.TransactionEnv}
 */
proto.protocol.TransactionEnvSet.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.TransactionEnv, opt_index);
};


proto.protocol.TransactionEnvSet.prototype.clearTxsList = function() {
  this.setTxsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ConsensusValueValidation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.ConsensusValueValidation.repeatedFields_, null);
};
goog.inherits(proto.protocol.ConsensusValueValidation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ConsensusValueValidation.displayName = 'proto.protocol.ConsensusValueValidation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.ConsensusValueValidation.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ConsensusValueValidation.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ConsensusValueValidation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ConsensusValueValidation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ConsensusValueValidation.toObject = function(includeInstance, msg) {
  var f, obj = {
    expireTxIdsList: jspb.Message.getRepeatedField(msg, 1),
    errorTxIdsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ConsensusValueValidation}
 */
proto.protocol.ConsensusValueValidation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ConsensusValueValidation;
  return proto.protocol.ConsensusValueValidation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ConsensusValueValidation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ConsensusValueValidation}
 */
proto.protocol.ConsensusValueValidation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setExpireTxIdsList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setErrorTxIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ConsensusValueValidation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ConsensusValueValidation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ConsensusValueValidation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ConsensusValueValidation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpireTxIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getErrorTxIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * repeated int32 expire_tx_ids = 1;
 * @return {!Array.<number>}
 */
proto.protocol.ConsensusValueValidation.prototype.getExpireTxIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.protocol.ConsensusValueValidation.prototype.setExpireTxIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protocol.ConsensusValueValidation.prototype.addExpireTxIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.protocol.ConsensusValueValidation.prototype.clearExpireTxIdsList = function() {
  this.setExpireTxIdsList([]);
};


/**
 * repeated int32 error_tx_ids = 2;
 * @return {!Array.<number>}
 */
proto.protocol.ConsensusValueValidation.prototype.getErrorTxIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.protocol.ConsensusValueValidation.prototype.setErrorTxIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protocol.ConsensusValueValidation.prototype.addErrorTxIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.protocol.ConsensusValueValidation.prototype.clearErrorTxIdsList = function() {
  this.setErrorTxIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ConsensusValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ConsensusValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ConsensusValue.displayName = 'proto.protocol.ConsensusValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ConsensusValue.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ConsensusValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ConsensusValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ConsensusValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    txset: (f = msg.getTxset()) && proto.protocol.TransactionEnvSet.toObject(includeInstance, f),
    closeTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    previousProof: msg.getPreviousProof_asB64(),
    ledgerSeq: jspb.Message.getFieldWithDefault(msg, 4, 0),
    previousLedgerHash: msg.getPreviousLedgerHash_asB64(),
    ledgerUpgrade: (f = msg.getLedgerUpgrade()) && common_pb.LedgerUpgrade.toObject(includeInstance, f),
    validation: (f = msg.getValidation()) && proto.protocol.ConsensusValueValidation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ConsensusValue}
 */
proto.protocol.ConsensusValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ConsensusValue;
  return proto.protocol.ConsensusValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ConsensusValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ConsensusValue}
 */
proto.protocol.ConsensusValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.TransactionEnvSet;
      reader.readMessage(value,proto.protocol.TransactionEnvSet.deserializeBinaryFromReader);
      msg.setTxset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCloseTime(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousProof(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLedgerSeq(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousLedgerHash(value);
      break;
    case 6:
      var value = new common_pb.LedgerUpgrade;
      reader.readMessage(value,common_pb.LedgerUpgrade.deserializeBinaryFromReader);
      msg.setLedgerUpgrade(value);
      break;
    case 7:
      var value = new proto.protocol.ConsensusValueValidation;
      reader.readMessage(value,proto.protocol.ConsensusValueValidation.deserializeBinaryFromReader);
      msg.setValidation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ConsensusValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ConsensusValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ConsensusValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ConsensusValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.TransactionEnvSet.serializeBinaryToWriter
    );
  }
  f = message.getCloseTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPreviousProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getLedgerSeq();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPreviousLedgerHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getLedgerUpgrade();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_pb.LedgerUpgrade.serializeBinaryToWriter
    );
  }
  f = message.getValidation();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.protocol.ConsensusValueValidation.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransactionEnvSet txset = 1;
 * @return {?proto.protocol.TransactionEnvSet}
 */
proto.protocol.ConsensusValue.prototype.getTxset = function() {
  return /** @type{?proto.protocol.TransactionEnvSet} */ (
    jspb.Message.getWrapperField(this, proto.protocol.TransactionEnvSet, 1));
};


/** @param {?proto.protocol.TransactionEnvSet|undefined} value */
proto.protocol.ConsensusValue.prototype.setTxset = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protocol.ConsensusValue.prototype.clearTxset = function() {
  this.setTxset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ConsensusValue.prototype.hasTxset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 close_time = 2;
 * @return {number}
 */
proto.protocol.ConsensusValue.prototype.getCloseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.ConsensusValue.prototype.setCloseTime = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes previous_proof = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.ConsensusValue.prototype.getPreviousProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes previous_proof = 3;
 * This is a type-conversion wrapper around `getPreviousProof()`
 * @return {string}
 */
proto.protocol.ConsensusValue.prototype.getPreviousProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousProof()));
};


/**
 * optional bytes previous_proof = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousProof()`
 * @return {!Uint8Array}
 */
proto.protocol.ConsensusValue.prototype.getPreviousProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousProof()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.ConsensusValue.prototype.setPreviousProof = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int64 ledger_seq = 4;
 * @return {number}
 */
proto.protocol.ConsensusValue.prototype.getLedgerSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.ConsensusValue.prototype.setLedgerSeq = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes previous_ledger_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.ConsensusValue.prototype.getPreviousLedgerHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes previous_ledger_hash = 5;
 * This is a type-conversion wrapper around `getPreviousLedgerHash()`
 * @return {string}
 */
proto.protocol.ConsensusValue.prototype.getPreviousLedgerHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousLedgerHash()));
};


/**
 * optional bytes previous_ledger_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousLedgerHash()`
 * @return {!Uint8Array}
 */
proto.protocol.ConsensusValue.prototype.getPreviousLedgerHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousLedgerHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.ConsensusValue.prototype.setPreviousLedgerHash = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional LedgerUpgrade ledger_upgrade = 6;
 * @return {?proto.protocol.LedgerUpgrade}
 */
proto.protocol.ConsensusValue.prototype.getLedgerUpgrade = function() {
  return /** @type{?proto.protocol.LedgerUpgrade} */ (
    jspb.Message.getWrapperField(this, common_pb.LedgerUpgrade, 6));
};


/** @param {?proto.protocol.LedgerUpgrade|undefined} value */
proto.protocol.ConsensusValue.prototype.setLedgerUpgrade = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.protocol.ConsensusValue.prototype.clearLedgerUpgrade = function() {
  this.setLedgerUpgrade(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ConsensusValue.prototype.hasLedgerUpgrade = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ConsensusValueValidation validation = 7;
 * @return {?proto.protocol.ConsensusValueValidation}
 */
proto.protocol.ConsensusValue.prototype.getValidation = function() {
  return /** @type{?proto.protocol.ConsensusValueValidation} */ (
    jspb.Message.getWrapperField(this, proto.protocol.ConsensusValueValidation, 7));
};


/** @param {?proto.protocol.ConsensusValueValidation|undefined} value */
proto.protocol.ConsensusValue.prototype.setValidation = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.protocol.ConsensusValue.prototype.clearValidation = function() {
  this.setValidation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ConsensusValue.prototype.hasValidation = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Contract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Contract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Contract.displayName = 'proto.protocol.Contract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Contract.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Contract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Contract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Contract.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payload: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Contract}
 */
proto.protocol.Contract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Contract;
  return proto.protocol.Contract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Contract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Contract}
 */
proto.protocol.Contract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protocol.Contract.ContractType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Contract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Contract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Contract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Contract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPayload();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.protocol.Contract.ContractType = {
  JAVASCRIPT: 0
};

/**
 * optional ContractType type = 1;
 * @return {!proto.protocol.Contract.ContractType}
 */
proto.protocol.Contract.prototype.getType = function() {
  return /** @type {!proto.protocol.Contract.ContractType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.protocol.Contract.ContractType} value */
proto.protocol.Contract.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string payload = 2;
 * @return {string}
 */
proto.protocol.Contract.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.Contract.prototype.setPayload = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationCreateAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.OperationCreateAccount.repeatedFields_, null);
};
goog.inherits(proto.protocol.OperationCreateAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationCreateAccount.displayName = 'proto.protocol.OperationCreateAccount';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.OperationCreateAccount.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.OperationCreateAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.OperationCreateAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.OperationCreateAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationCreateAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    destAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contract: (f = msg.getContract()) && proto.protocol.Contract.toObject(includeInstance, f),
    priv: (f = msg.getPriv()) && proto.protocol.AccountPrivilege.toObject(includeInstance, f),
    metadatasList: jspb.Message.toObjectList(msg.getMetadatasList(),
    common_pb.KeyPair.toObject, includeInstance),
    initBalance: jspb.Message.getFieldWithDefault(msg, 5, 0),
    initInput: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationCreateAccount}
 */
proto.protocol.OperationCreateAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationCreateAccount;
  return proto.protocol.OperationCreateAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationCreateAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationCreateAccount}
 */
proto.protocol.OperationCreateAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestAddress(value);
      break;
    case 2:
      var value = new proto.protocol.Contract;
      reader.readMessage(value,proto.protocol.Contract.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    case 3:
      var value = new proto.protocol.AccountPrivilege;
      reader.readMessage(value,proto.protocol.AccountPrivilege.deserializeBinaryFromReader);
      msg.setPriv(value);
      break;
    case 4:
      var value = new common_pb.KeyPair;
      reader.readMessage(value,common_pb.KeyPair.deserializeBinaryFromReader);
      msg.addMetadatas(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInitBalance(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationCreateAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.OperationCreateAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationCreateAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationCreateAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDestAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.Contract.serializeBinaryToWriter
    );
  }
  f = message.getPriv();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.AccountPrivilege.serializeBinaryToWriter
    );
  }
  f = message.getMetadatasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_pb.KeyPair.serializeBinaryToWriter
    );
  }
  f = message.getInitBalance();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getInitInput();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string dest_address = 1;
 * @return {string}
 */
proto.protocol.OperationCreateAccount.prototype.getDestAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.OperationCreateAccount.prototype.setDestAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Contract contract = 2;
 * @return {?proto.protocol.Contract}
 */
proto.protocol.OperationCreateAccount.prototype.getContract = function() {
  return /** @type{?proto.protocol.Contract} */ (
    jspb.Message.getWrapperField(this, proto.protocol.Contract, 2));
};


/** @param {?proto.protocol.Contract|undefined} value */
proto.protocol.OperationCreateAccount.prototype.setContract = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.protocol.OperationCreateAccount.prototype.clearContract = function() {
  this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.OperationCreateAccount.prototype.hasContract = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AccountPrivilege priv = 3;
 * @return {?proto.protocol.AccountPrivilege}
 */
proto.protocol.OperationCreateAccount.prototype.getPriv = function() {
  return /** @type{?proto.protocol.AccountPrivilege} */ (
    jspb.Message.getWrapperField(this, proto.protocol.AccountPrivilege, 3));
};


/** @param {?proto.protocol.AccountPrivilege|undefined} value */
proto.protocol.OperationCreateAccount.prototype.setPriv = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.protocol.OperationCreateAccount.prototype.clearPriv = function() {
  this.setPriv(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.OperationCreateAccount.prototype.hasPriv = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated KeyPair metadatas = 4;
 * @return {!Array.<!proto.protocol.KeyPair>}
 */
proto.protocol.OperationCreateAccount.prototype.getMetadatasList = function() {
  return /** @type{!Array.<!proto.protocol.KeyPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.KeyPair, 4));
};


/** @param {!Array.<!proto.protocol.KeyPair>} value */
proto.protocol.OperationCreateAccount.prototype.setMetadatasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.protocol.KeyPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.KeyPair}
 */
proto.protocol.OperationCreateAccount.prototype.addMetadatas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protocol.KeyPair, opt_index);
};


proto.protocol.OperationCreateAccount.prototype.clearMetadatasList = function() {
  this.setMetadatasList([]);
};


/**
 * optional int64 init_balance = 5;
 * @return {number}
 */
proto.protocol.OperationCreateAccount.prototype.getInitBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.OperationCreateAccount.prototype.setInitBalance = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string init_input = 6;
 * @return {string}
 */
proto.protocol.OperationCreateAccount.prototype.getInitInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.protocol.OperationCreateAccount.prototype.setInitInput = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.OperationSetMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.OperationSetMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.OperationSetMetadata.displayName = 'proto.protocol.OperationSetMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.OperationSetMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.OperationSetMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.OperationSetMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationSetMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    deleteFlag: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.OperationSetMetadata}
 */
proto.protocol.OperationSetMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.OperationSetMetadata;
  return proto.protocol.OperationSetMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.OperationSetMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.OperationSetMetadata}
 */
proto.protocol.OperationSetMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleteFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.OperationSetMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.OperationSetMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.OperationSetMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.OperationSetMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDeleteFlag();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.protocol.OperationSetMetadata.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.OperationSetMetadata.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.protocol.OperationSetMetadata.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.OperationSetMetadata.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 version = 3;
 * @return {number}
 */
proto.protocol.OperationSetMetadata.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.OperationSetMetadata.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool delete_flag = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.OperationSetMetadata.prototype.getDeleteFlag = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.protocol.OperationSetMetadata.prototype.setDeleteFlag = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.protocol.Limit = {
  UNKNOWN: 0,
  SIGNATURE: 100
};

goog.object.extend(exports, proto.protocol);
