// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CommonRoot

@implementation CommonRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - CommonRoot_FileDescriptor

static GPBFileDescriptor *CommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ERRORCODE

GPBEnumDescriptor *ERRORCODE_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ErrcodeSuccess\000ErrcodeInternalError\000Errc"
        "odeInvalidParameter\000ErrcodeAlreadyExist\000"
        "ErrcodeNotExist\000ErrcodeTxTimeout\000Errcode"
        "AccessDenied\000ErrcodeMathOverflow\000Errcode"
        "ExprConditionResultFalse\000ErrcodeExprCond"
        "itionSyntaxError\000ErrcodeInvalidPubkey\000Er"
        "rcodeInvalidPrikey\000ErrcodeAssetInvalid\000E"
        "rrcodeInvalidSignature\000ErrcodeInvalidAdd"
        "ress\000ErrcodeMissingOperations\000ErrcodeToo"
        "ManyOperations\000ErrcodeBadSequence\000Errcod"
        "eAccountLowReserve\000ErrcodeAccountSourced"
        "estEqual\000ErrcodeAccountDestExist\000Errcode"
        "AccountNotExist\000ErrcodeAccountAssetLowRe"
        "serve\000ErrcodeAccountAssetAmountTooLarge\000"
        "ErrcodeAccountInitLowReserve\000ErrcodeFeeN"
        "otEnough\000ErrcodeFeeInvalid\000ErrcodeOutOfT"
        "xcache\000ErrcodeWeightNotValid\000ErrcodeThre"
        "sholdNotValid\000ErrcodeInvalidDataversion\000"
        "ErrcodeTxSizeTooBig\000ErrcodeContractExecu"
        "teFail\000ErrcodeContractSyntaxError\000Errcod"
        "eContractTooManyRecursion\000ErrcodeContrac"
        "tTooManyTransactions\000ErrcodeContractExec"
        "uteExpired\000ErrcodeTxInsertQueueFail\000";
    static const int32_t values[] = {
        ERRORCODE_ErrcodeSuccess,
        ERRORCODE_ErrcodeInternalError,
        ERRORCODE_ErrcodeInvalidParameter,
        ERRORCODE_ErrcodeAlreadyExist,
        ERRORCODE_ErrcodeNotExist,
        ERRORCODE_ErrcodeTxTimeout,
        ERRORCODE_ErrcodeAccessDenied,
        ERRORCODE_ErrcodeMathOverflow,
        ERRORCODE_ErrcodeExprConditionResultFalse,
        ERRORCODE_ErrcodeExprConditionSyntaxError,
        ERRORCODE_ErrcodeInvalidPubkey,
        ERRORCODE_ErrcodeInvalidPrikey,
        ERRORCODE_ErrcodeAssetInvalid,
        ERRORCODE_ErrcodeInvalidSignature,
        ERRORCODE_ErrcodeInvalidAddress,
        ERRORCODE_ErrcodeMissingOperations,
        ERRORCODE_ErrcodeTooManyOperations,
        ERRORCODE_ErrcodeBadSequence,
        ERRORCODE_ErrcodeAccountLowReserve,
        ERRORCODE_ErrcodeAccountSourcedestEqual,
        ERRORCODE_ErrcodeAccountDestExist,
        ERRORCODE_ErrcodeAccountNotExist,
        ERRORCODE_ErrcodeAccountAssetLowReserve,
        ERRORCODE_ErrcodeAccountAssetAmountTooLarge,
        ERRORCODE_ErrcodeAccountInitLowReserve,
        ERRORCODE_ErrcodeFeeNotEnough,
        ERRORCODE_ErrcodeFeeInvalid,
        ERRORCODE_ErrcodeOutOfTxcache,
        ERRORCODE_ErrcodeWeightNotValid,
        ERRORCODE_ErrcodeThresholdNotValid,
        ERRORCODE_ErrcodeInvalidDataversion,
        ERRORCODE_ErrcodeTxSizeTooBig,
        ERRORCODE_ErrcodeContractExecuteFail,
        ERRORCODE_ErrcodeContractSyntaxError,
        ERRORCODE_ErrcodeContractTooManyRecursion,
        ERRORCODE_ErrcodeContractTooManyTransactions,
        ERRORCODE_ErrcodeContractExecuteExpired,
        ERRORCODE_ErrcodeTxInsertQueueFail,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ERRORCODE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ERRORCODE_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ERRORCODE_IsValidValue(int32_t value__) {
  switch (value__) {
    case ERRORCODE_ErrcodeSuccess:
    case ERRORCODE_ErrcodeInternalError:
    case ERRORCODE_ErrcodeInvalidParameter:
    case ERRORCODE_ErrcodeAlreadyExist:
    case ERRORCODE_ErrcodeNotExist:
    case ERRORCODE_ErrcodeTxTimeout:
    case ERRORCODE_ErrcodeAccessDenied:
    case ERRORCODE_ErrcodeMathOverflow:
    case ERRORCODE_ErrcodeExprConditionResultFalse:
    case ERRORCODE_ErrcodeExprConditionSyntaxError:
    case ERRORCODE_ErrcodeInvalidPubkey:
    case ERRORCODE_ErrcodeInvalidPrikey:
    case ERRORCODE_ErrcodeAssetInvalid:
    case ERRORCODE_ErrcodeInvalidSignature:
    case ERRORCODE_ErrcodeInvalidAddress:
    case ERRORCODE_ErrcodeMissingOperations:
    case ERRORCODE_ErrcodeTooManyOperations:
    case ERRORCODE_ErrcodeBadSequence:
    case ERRORCODE_ErrcodeAccountLowReserve:
    case ERRORCODE_ErrcodeAccountSourcedestEqual:
    case ERRORCODE_ErrcodeAccountDestExist:
    case ERRORCODE_ErrcodeAccountNotExist:
    case ERRORCODE_ErrcodeAccountAssetLowReserve:
    case ERRORCODE_ErrcodeAccountAssetAmountTooLarge:
    case ERRORCODE_ErrcodeAccountInitLowReserve:
    case ERRORCODE_ErrcodeFeeNotEnough:
    case ERRORCODE_ErrcodeFeeInvalid:
    case ERRORCODE_ErrcodeOutOfTxcache:
    case ERRORCODE_ErrcodeWeightNotValid:
    case ERRORCODE_ErrcodeThresholdNotValid:
    case ERRORCODE_ErrcodeInvalidDataversion:
    case ERRORCODE_ErrcodeTxSizeTooBig:
    case ERRORCODE_ErrcodeContractExecuteFail:
    case ERRORCODE_ErrcodeContractSyntaxError:
    case ERRORCODE_ErrcodeContractTooManyRecursion:
    case ERRORCODE_ErrcodeContractTooManyTransactions:
    case ERRORCODE_ErrcodeContractExecuteExpired:
    case ERRORCODE_ErrcodeTxInsertQueueFail:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - KeyPair

@implementation KeyPair

@dynamic key;
@dynamic value;
@dynamic version;

typedef struct KeyPair__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *value;
  int64_t version;
} KeyPair__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = KeyPair_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyPair__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = KeyPair_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KeyPair__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = KeyPair_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(KeyPair__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyPair class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyPair__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Signature

@implementation Signature

@dynamic publicKey;
@dynamic signData;

typedef struct Signature__storage_ {
  uint32_t _has_storage_[1];
  NSString *publicKey;
  NSData *signData;
} Signature__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "publicKey",
        .dataTypeSpecific.className = NULL,
        .number = Signature_FieldNumber_PublicKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Signature__storage_, publicKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signData",
        .dataTypeSpecific.className = NULL,
        .number = Signature_FieldNumber_SignData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Signature__storage_, signData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Signature class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Signature__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LedgerUpgrade

@implementation LedgerUpgrade

@dynamic newLedgerVersion;
@dynamic newValidator;

typedef struct LedgerUpgrade__storage_ {
  uint32_t _has_storage_[1];
  NSString *newValidator;
  int64_t newLedgerVersion;
} LedgerUpgrade__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "newLedgerVersion",
        .dataTypeSpecific.className = NULL,
        .number = LedgerUpgrade_FieldNumber_NewLedgerVersion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LedgerUpgrade__storage_, newLedgerVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "newValidator",
        .dataTypeSpecific.className = NULL,
        .number = LedgerUpgrade_FieldNumber_NewValidator,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LedgerUpgrade__storage_, newValidator),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LedgerUpgrade class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LedgerUpgrade__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WsMessage

@implementation WsMessage

@dynamic type;
@dynamic request;
@dynamic sequence;
@dynamic data_p;

typedef struct WsMessage__storage_ {
  uint32_t _has_storage_[1];
  NSData *data_p;
  int64_t type;
  int64_t sequence;
} WsMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = WsMessage_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WsMessage__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "request",
        .dataTypeSpecific.className = NULL,
        .number = WsMessage_FieldNumber_Request,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sequence",
        .dataTypeSpecific.className = NULL,
        .number = WsMessage_FieldNumber_Sequence,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WsMessage__storage_, sequence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = WsMessage_FieldNumber_Data_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WsMessage__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WsMessage class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WsMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Ping

@implementation Ping

@dynamic nonce;

typedef struct Ping__storage_ {
  uint32_t _has_storage_[1];
  int64_t nonce;
} Ping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = Ping_FieldNumber_Nonce,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Ping__storage_, nonce),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Ping class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Ping__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Pong

@implementation Pong

@dynamic nonce;

typedef struct Pong__storage_ {
  uint32_t _has_storage_[1];
  int64_t nonce;
} Pong__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = Pong_FieldNumber_Nonce,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Pong__storage_, nonce),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Pong class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Pong__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
